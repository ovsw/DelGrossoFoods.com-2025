/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SubscribeNewsletter = {
  _type: "subscribeNewsletter";
  title?: string;
  subTitle?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h2" | "h3" | "h4" | "h5" | "h6" | "inline";
    listItem?: "number" | "bullet";
    markDefs?: Array<{
      customLink?: CustomUrl;
      _type: "customLink";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  helperText?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h2" | "h3" | "h4" | "h5" | "h6" | "inline";
    listItem?: "number" | "bullet";
    markDefs?: Array<{
      customLink?: CustomUrl;
      _type: "customLink";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  spacing: SectionSpacing;
};

export type ImageLinkCards = {
  _type: "imageLinkCards";
  eyebrow?: string;
  title: string;
  richText?: Array<
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "normal" | "h2" | "h3" | "h4" | "h5" | "h6" | "inline";
        listItem?: "number" | "bullet";
        markDefs?: Array<{
          customLink?: CustomUrl;
          _type: "customLink";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        caption?: string;
        _type: "image";
        _key: string;
      }
  >;
  buttons?: Array<
    {
      _key: string;
    } & Button
  >;
  cards?: Array<{
    title: string;
    description: string;
    image?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    url?: CustomUrl;
    _type: "imageLinkCard";
    _key: string;
  }>;
  spacing: SectionSpacing;
};

export type FaqAccordion = {
  _type: "faqAccordion";
  eyebrow?: string;
  title: string;
  subtitle?: string;
  link?: {
    title?: string;
    description?: string;
    url?: CustomUrl;
  };
  faqs: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "faq";
  }>;
  spacing: SectionSpacing;
};

export type FeatureCardsIcon = {
  _type: "featureCardsIcon";
  eyebrow?: string;
  title?: string;
  richText?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h2" | "h3" | "h4" | "h5" | "h6" | "inline";
    listItem?: "number" | "bullet";
    markDefs?: Array<{
      customLink?: CustomUrl;
      _type: "customLink";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  cards?: Array<{
    icon?: IconPicker;
    title?: string;
    richText?: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal" | "h2" | "h3" | "h4" | "h5" | "h6" | "inline";
      listItem?: "number" | "bullet";
      markDefs?: Array<{
        customLink?: CustomUrl;
        _type: "customLink";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }>;
    _type: "featureCardIcon";
    _key: string;
  }>;
  spacing: SectionSpacing;
};

export type Cta = {
  _type: "cta";
  eyebrow?: string;
  title?: string;
  richText?: Array<
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "normal" | "h2" | "h3" | "h4" | "h5" | "h6" | "inline";
        listItem?: "number" | "bullet";
        markDefs?: Array<{
          customLink?: CustomUrl;
          _type: "customLink";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        caption?: string;
        _type: "image";
        _key: string;
      }
  >;
  buttons?: Array<
    {
      _key: string;
    } & Button
  >;
  spacing: SectionSpacing;
};

export type Feature = {
  _type: "feature";
  badge?: string;
  title?: string;
  richText?: Array<
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "normal" | "h2" | "h3" | "h4" | "h5" | "h6" | "inline";
        listItem?: "number" | "bullet";
        markDefs?: Array<{
          customLink?: CustomUrl;
          _type: "customLink";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        caption?: string;
        _type: "image";
        _key: string;
      }
  >;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  buttons?: Array<
    {
      _key: string;
    } & Button
  >;
  spacing: SectionSpacing;
};

export type TimelineMarker = {
  _type: "timelineMarker";
  heading?: string;
  subtitle?: string;
  content?: Array<
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "normal" | "h2" | "h3" | "h4" | "h5" | "h6" | "inline";
        listItem?: "number" | "bullet";
        markDefs?: Array<{
          customLink?: CustomUrl;
          _type: "customLink";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        caption?: string;
        _type: "image";
        _key: string;
      }
  >;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
};

export type SectionSpacing = {
  _type: "sectionSpacing";
  spacingTop: "default" | "none" | "small" | "large";
  spacingBottom: "default" | "none" | "small" | "large";
};

export type PageBuilder = Array<
  | ({
      _key: string;
    } & Feature)
  | ({
      _key: string;
    } & Cta)
  | ({
      _key: string;
    } & FeatureCardsIcon)
  | ({
      _key: string;
    } & FaqAccordion)
  | ({
      _key: string;
    } & ImageLinkCards)
  | ({
      _key: string;
    } & SubscribeNewsletter)
>;

export type Button = {
  _type: "button";
  variant?: "default" | "secondary" | "outline" | "link";
  text?: string;
  url?: CustomUrl;
};

export type RichText = Array<
  | {
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal" | "h2" | "h3" | "h4" | "h5" | "h6" | "inline";
      listItem?: "number" | "bullet";
      markDefs?: Array<{
        customLink?: CustomUrl;
        _type: "customLink";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }
  | {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      caption?: string;
      _type: "image";
      _key: string;
    }
>;

export type HistoryPage = {
  _id: string;
  _type: "historyPage";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  description?: string;
  timeline?: Timeline;
  pageBuilder?: PageBuilder;
  seoTitle?: string;
  seoDescription?: string;
  seoImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  seoNoIndex?: boolean;
  seoHideFromLists?: boolean;
  ogTitle?: string;
  ogDescription?: string;
};

export type Timeline = {
  _type: "timeline";
  markers?: Array<
    {
      _key: string;
    } & TimelineMarker
  >;
};

export type Navbar = {
  _id: string;
  _type: "navbar";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  label: string;
  columns?: Array<
    | {
        title?: string;
        links: Array<{
          icon?: IconPicker;
          name?: string;
          description?: string;
          url?: CustomUrl;
          _type: "navbarColumnLink";
          _key: string;
        }>;
        _type: "navbarColumn";
        _key: string;
      }
    | {
        name?: string;
        url?: CustomUrl;
        _type: "navbarLink";
        _key: string;
      }
  >;
  buttons?: Array<
    {
      _key: string;
    } & Button
  >;
};

export type Footer = {
  _id: string;
  _type: "footer";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  label: string;
  subtitle?: string;
  columns?: Array<{
    title?: string;
    links?: Array<{
      name?: string;
      url?: CustomUrl;
      _type: "footerColumnLink";
      _key: string;
    }>;
    _type: "footerColumn";
    _key: string;
  }>;
};

export type Settings = {
  _id: string;
  _type: "settings";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  label: string;
  siteTitle: string;
  siteDescription: string;
  addressLines?: Array<string>;
  tollFreePhone?: string;
  officePhone?: string;
  contactEmail?: string;
  socialLinks?: {
    linkedin?: string;
    facebook?: string;
    twitter?: string;
    instagram?: string;
    youtube?: string;
  };
};

export type ProductIndex = {
  _id: string;
  _type: "productIndex";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  description?: string;
  slug: Slug;
  pageBuilder?: PageBuilder;
  seoTitle?: string;
  seoDescription?: string;
  seoImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  ogTitle?: string;
  ogDescription?: string;
};

export type RecipeIndex = {
  _id: string;
  _type: "recipeIndex";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  description?: string;
  slug: Slug;
  pageBuilder?: PageBuilder;
  seoTitle?: string;
  seoDescription?: string;
  seoImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  ogTitle?: string;
  ogDescription?: string;
};

export type SauceIndex = {
  _id: string;
  _type: "sauceIndex";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  description?: string;
  slug: Slug;
  displayFeaturedSauces?: "yes" | "no";
  featuredSaucesCount?: "1" | "2" | "3";
  pageBuilder?: PageBuilder;
  seoTitle?: string;
  seoDescription?: string;
  seoImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  ogTitle?: string;
  ogDescription?: string;
};

export type BlogIndex = {
  _id: string;
  _type: "blogIndex";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  description?: string;
  slug: Slug;
  displayFeaturedBlogs?: "yes" | "no";
  featuredBlogsCount?: "1" | "2" | "3";
  pageBuilder?: PageBuilder;
  seoTitle?: string;
  seoDescription?: string;
  seoImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  ogTitle?: string;
  ogDescription?: string;
};

export type HomePage = {
  _id: string;
  _type: "homePage";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  description?: string;
  slug: Slug;
  pageBuilder?: PageBuilder;
  seoTitle?: string;
  seoDescription?: string;
  seoImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  ogTitle?: string;
  ogDescription?: string;
};

export type RecipeCategory = {
  _id: string;
  _type: "recipeCategory";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  slug: Slug;
};

export type Recipe = {
  _id: string;
  _type: "recipe";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name: string;
  slug: Slug;
  versions: Array<string>;
  dgfSauces?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "sauce";
  }>;
  lfdSauces?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "sauce";
  }>;
  tags?: Array<string>;
  meat?: Array<string>;
  serves?: string;
  categories?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "recipeCategory";
  }>;
  mainImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  dgfIngredients: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  dgfDirections: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  dgfNotes?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  lfdIngredients: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  lfdDirections: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  lfdNotes?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  orderRank?: string;
};

export type Product = {
  _id: string;
  _type: "product";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name: string;
  slug: Slug;
  sku: string;
  category: "case_of_12" | "gift_pack" | "merchandise";
  shippingCategory: "normal_item" | "large_crate" | "gift_pack";
  description?: RichText;
  price?: number;
  weight: number;
  sauces?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "sauce";
  }>;
  mainImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
};

export type Sauce = {
  _id: string;
  _type: "sauce";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  orderRank?: string;
  name: string;
  slug: Slug;
  line: "Original" | "Organic" | "Ultra-Premium";
  category: "Pasta Sauce" | "Pizza Sauce" | "Salsa Sauce" | "Sandwich Sauce";
  sauceJarSize:
    | "26 oz."
    | "24 oz."
    | "16.9 oz."
    | "16 oz."
    | "14 oz."
    | "13.5 oz.";
  description: RichText;
  mainImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  labelFlatImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  nutritionalInfo?: {
    netWeight?: string;
    servingsPerContainer?: string;
    servingSize?: string;
    gramsPerServing?: string;
    calories?: string;
    totalFat?: string;
    totalFatPerc?: string;
    saturatedFat?: string;
    saturatedFatPerc?: string;
    transFat?: string;
    cholesterol?: string;
    cholesterolPerc?: string;
    sodium?: string;
    sodiumPerc?: string;
    totalCarbohydrate?: string;
    totalCarbohydratePerc?: string;
    dietaryFiber?: string;
    dietaryFiberPerc?: string;
    totalSugars?: string;
    addedSugars?: string;
    addedSugarsPerc?: string;
    protein?: string;
    vitaminD?: string;
    vitaminDPerc?: string;
    calcium?: string;
    calciumPerc?: string;
    iron?: string;
    ironPerc?: string;
    potassium?: string;
    potassiumPerc?: string;
  };
  ingredients?: string;
  allergens?: string;
  authorName?: string;
  authorImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
};

export type Author = {
  _id: string;
  _type: "author";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name: string;
  position?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  bio?: string;
};

export type Faq = {
  _id: string;
  _type: "faq";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  richText?: RichText;
};

export type Page = {
  _id: string;
  _type: "page";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  description?: string;
  slug: Slug;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  pageBuilder?: PageBuilder;
  seoTitle?: string;
  seoDescription?: string;
  seoImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  seoNoIndex?: boolean;
  ogTitle?: string;
  ogDescription?: string;
};

export type Blog = {
  _id: string;
  _type: "blog";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  orderRank?: string;
  title: string;
  description?: string;
  slug: Slug;
  authors: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "author";
  }>;
  publishedAt?: string;
  image: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  richText?: RichText;
  seoTitle?: string;
  seoDescription?: string;
  seoImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  seoNoIndex?: boolean;
  seoHideFromLists?: boolean;
  ogTitle?: string;
  ogDescription?: string;
};

export type CustomUrl = {
  _type: "customUrl";
  type: "internal" | "external";
  openInNewTab?: boolean;
  external?: string;
  href?: string;
  internal?:
    | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "blog";
      }
    | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "blogIndex";
      }
    | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "page";
      };
};

export type SanityAssistInstructionTask = {
  _type: "sanity.assist.instructionTask";
  path?: string;
  instructionKey?: string;
  started?: string;
  updated?: string;
  info?: string;
};

export type SanityAssistTaskStatus = {
  _type: "sanity.assist.task.status";
  tasks?: Array<
    {
      _key: string;
    } & SanityAssistInstructionTask
  >;
};

export type SanityAssistSchemaTypeAnnotations = {
  _type: "sanity.assist.schemaType.annotations";
  title?: string;
  fields?: Array<
    {
      _key: string;
    } & SanityAssistSchemaTypeField
  >;
};

export type SanityAssistOutputType = {
  _type: "sanity.assist.output.type";
  type?: string;
};

export type SanityAssistOutputField = {
  _type: "sanity.assist.output.field";
  path?: string;
};

export type SanityAssistInstructionContext = {
  _type: "sanity.assist.instruction.context";
  reference: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "assist.instruction.context";
  };
};

export type AssistInstructionContext = {
  _id: string;
  _type: "assist.instruction.context";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  context?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: null;
    level?: number;
    _type: "block";
    _key: string;
  }>;
};

export type SanityAssistInstructionUserInput = {
  _type: "sanity.assist.instruction.userInput";
  message: string;
  description?: string;
};

export type SanityAssistInstructionPrompt = Array<{
  children?: Array<
    | {
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }
    | ({
        _key: string;
      } & SanityAssistInstructionFieldRef)
    | ({
        _key: string;
      } & SanityAssistInstructionContext)
    | ({
        _key: string;
      } & SanityAssistInstructionUserInput)
  >;
  style?: "normal";
  listItem?: never;
  markDefs?: null;
  level?: number;
  _type: "block";
  _key: string;
}>;

export type SanityAssistInstructionFieldRef = {
  _type: "sanity.assist.instruction.fieldRef";
  path?: string;
};

export type SanityAssistInstruction = {
  _type: "sanity.assist.instruction";
  prompt?: SanityAssistInstructionPrompt;
  icon?: string;
  title?: string;
  userId?: string;
  createdById?: string;
  output?: Array<
    | ({
        _key: string;
      } & SanityAssistOutputField)
    | ({
        _key: string;
      } & SanityAssistOutputType)
  >;
};

export type SanityAssistSchemaTypeField = {
  _type: "sanity.assist.schemaType.field";
  path?: string;
  instructions?: Array<
    {
      _key: string;
    } & SanityAssistInstruction
  >;
};

export type IconPicker = {
  _type: "iconPicker";
  provider?: string;
  name?: string;
  svg?: string;
};

export type MediaTag = {
  _id: string;
  _type: "media.tag";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: Slug;
};

export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height: number;
  width: number;
  aspectRatio: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x: number;
  y: number;
  height: number;
  width: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top: number;
  bottom: number;
  left: number;
  right: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes =
  | SubscribeNewsletter
  | ImageLinkCards
  | FaqAccordion
  | FeatureCardsIcon
  | Cta
  | Feature
  | TimelineMarker
  | SectionSpacing
  | PageBuilder
  | Button
  | RichText
  | HistoryPage
  | Timeline
  | Navbar
  | Footer
  | Settings
  | ProductIndex
  | RecipeIndex
  | SauceIndex
  | BlogIndex
  | HomePage
  | RecipeCategory
  | Recipe
  | Product
  | Sauce
  | Author
  | Faq
  | Page
  | Blog
  | CustomUrl
  | SanityAssistInstructionTask
  | SanityAssistTaskStatus
  | SanityAssistSchemaTypeAnnotations
  | SanityAssistOutputType
  | SanityAssistOutputField
  | SanityAssistInstructionContext
  | AssistInstructionContext
  | SanityAssistInstructionUserInput
  | SanityAssistInstructionPrompt
  | SanityAssistInstructionFieldRef
  | SanityAssistInstruction
  | SanityAssistSchemaTypeField
  | IconPicker
  | MediaTag
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityImageHotspot
  | SanityImageCrop
  | SanityFileAsset
  | SanityImageAsset
  | SanityImageMetadata
  | Geopoint
  | Slug
  | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ../web/src/lib/sanity/query.ts
// Variable: queryImageType
// Query: *[_type == "page" && defined(image)][0]{      image {      "id": asset._ref,  "preview": asset->metadata.lqip,  hotspot {    x,    y  },  crop {    bottom,    left,    right,    top  }  }  }.image
export type QueryImageTypeResult = {
  id: string | null;
  preview: string | null;
  hotspot: {
    x: number;
    y: number;
  } | null;
  crop: {
    bottom: number;
    left: number;
    right: number;
    top: number;
  } | null;
} | null;
// Variable: queryHomePageData
// Query: *[_type == "homePage" && _id == "homePage"][0]{    ...,    _id,    _type,    "slug": slug.current,    title,    description,      pageBuilder[]{    ...,      "spacing": {    "spacingTop": coalesce(spacing.spacingTop, "default"),    "spacingBottom": coalesce(spacing.spacingBottom, "default")  },    _type,      _type == "cta" => {    ...,      richText[]{    ...,    _type == "block" => {      ...,        markDefs[]{    ...,      ...customLink{    openInNewTab,    "href": select(      type == "internal" => internal->slug.current,      type == "external" => external,      "#"    ),  }  }    },    _type == "image" => {        "id": asset._ref,  "preview": asset->metadata.lqip,  hotspot {    x,    y  },  crop {    bottom,    left,    right,    top  },      "caption": caption    }  },      buttons[]{    text,    variant,    _key,    _type,    "openInNewTab": url.openInNewTab,    "href": select(      url.type == "internal" => url.internal->slug.current,      url.type == "external" => url.external,      url.href    ),  },  },      _type == "feature" => {    ...,      image {      "id": asset._ref,  "preview": asset->metadata.lqip,  hotspot {    x,    y  },  crop {    bottom,    left,    right,    top  }  },      buttons[]{    text,    variant,    _key,    _type,    "openInNewTab": url.openInNewTab,    "href": select(      url.type == "internal" => url.internal->slug.current,      url.type == "external" => url.external,      url.href    ),  },      richText[]{    ...,    _type == "block" => {      ...,        markDefs[]{    ...,      ...customLink{    openInNewTab,    "href": select(      type == "internal" => internal->slug.current,      type == "external" => external,      "#"    ),  }  }    },    _type == "image" => {        "id": asset._ref,  "preview": asset->metadata.lqip,  hotspot {    x,    y  },  crop {    bottom,    left,    right,    top  },      "caption": caption    }  }  },      _type == "faqAccordion" => {    ...,      "faqs": array::compact(faqs[]->{    title,    _id,    _type,      richText[]{    ...,    _type == "block" => {      ...,        markDefs[]{    ...,      ...customLink{    openInNewTab,    "href": select(      type == "internal" => internal->slug.current,      type == "external" => external,      "#"    ),  }  }    },    _type == "image" => {        "id": asset._ref,  "preview": asset->metadata.lqip,  hotspot {    x,    y  },  crop {    bottom,    left,    right,    top  },      "caption": caption    }  }  }),    link{      ...,      "openInNewTab": url.openInNewTab,      "href": select(        url.type == "internal" => url.internal->slug.current,        url.type == "external" => url.external,        url.href      )    }  },      _type == "featureCardsIcon" => {    ...,      richText[]{    ...,    _type == "block" => {      ...,        markDefs[]{    ...,      ...customLink{    openInNewTab,    "href": select(      type == "internal" => internal->slug.current,      type == "external" => external,      "#"    ),  }  }    },    _type == "image" => {        "id": asset._ref,  "preview": asset->metadata.lqip,  hotspot {    x,    y  },  crop {    bottom,    left,    right,    top  },      "caption": caption    }  },    "cards": array::compact(cards[]{      ...,        richText[]{    ...,    _type == "block" => {      ...,        markDefs[]{    ...,      ...customLink{    openInNewTab,    "href": select(      type == "internal" => internal->slug.current,      type == "external" => external,      "#"    ),  }  }    },    _type == "image" => {        "id": asset._ref,  "preview": asset->metadata.lqip,  hotspot {    x,    y  },  crop {    bottom,    left,    right,    top  },      "caption": caption    }  },    })  },      _type == "subscribeNewsletter" => {    ...,    "subTitle": subTitle[]{      ...,        markDefs[]{    ...,      ...customLink{    openInNewTab,    "href": select(      type == "internal" => internal->slug.current,      type == "external" => external,      "#"    ),  }  }    },    "helperText": helperText[]{      ...,        markDefs[]{    ...,      ...customLink{    openInNewTab,    "href": select(      type == "internal" => internal->slug.current,      type == "external" => external,      "#"    ),  }  }    }  },      _type == "imageLinkCards" => {    ...,      richText[]{    ...,    _type == "block" => {      ...,        markDefs[]{    ...,      ...customLink{    openInNewTab,    "href": select(      type == "internal" => internal->slug.current,      type == "external" => external,      "#"    ),  }  }    },    _type == "image" => {        "id": asset._ref,  "preview": asset->metadata.lqip,  hotspot {    x,    y  },  crop {    bottom,    left,    right,    top  },      "caption": caption    }  },      buttons[]{    text,    variant,    _key,    _type,    "openInNewTab": url.openInNewTab,    "href": select(      url.type == "internal" => url.internal->slug.current,      url.type == "external" => url.external,      url.href    ),  },    "cards": array::compact(cards[]{      ...,      "openInNewTab": url.openInNewTab,      "href": select(        url.type == "internal" => url.internal->slug.current,        url.type == "external" => url.external,        url.href      ),        image {      "id": asset._ref,  "preview": asset->metadata.lqip,  hotspot {    x,    y  },  crop {    bottom,    left,    right,    top  }  },    })  }  }  }
export type QueryHomePageDataResult = {
  _id: string;
  _type: "homePage";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string | null;
  description: string | null;
  slug: string;
  pageBuilder: Array<
    | {
        _key: string;
        _type: "cta";
        eyebrow?: string;
        title?: string;
        richText: Array<
          | {
              children?: Array<{
                marks?: Array<string>;
                text?: string;
                _type: "span";
                _key: string;
              }>;
              style?: "h2" | "h3" | "h4" | "h5" | "h6" | "inline" | "normal";
              listItem?: "bullet" | "number";
              markDefs: Array<
                | {
                    customLink?: CustomUrl;
                    _type: "customLink";
                    _key: string;
                    openInNewTab: boolean | null;
                    href: string | "#" | null;
                  }
                | {
                    customLink?: CustomUrl;
                    _type: "customLink";
                    _key: string;
                  }
              > | null;
              level?: number;
              _type: "block";
              _key: string;
            }
          | {
              asset?: {
                _ref: string;
                _type: "reference";
                _weak?: boolean;
                [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
              };
              media?: unknown;
              hotspot: {
                x: number;
                y: number;
              } | null;
              crop: {
                bottom: number;
                left: number;
                right: number;
                top: number;
              } | null;
              caption: string | null;
              _type: "image";
              _key: string;
              id: string | null;
              preview: string | null;
            }
        > | null;
        buttons: Array<{
          text: string | null;
          variant: "default" | "link" | "outline" | "secondary" | null;
          _key: string;
          _type: "button";
          openInNewTab: boolean | null;
          href: string | null;
        }> | null;
        spacing: SectionSpacing;
      }
    | {
        _key: string;
        _type: "faqAccordion";
        eyebrow?: string;
        title: string;
        subtitle?: string;
        link: {
          title?: string;
          description?: string;
          url?: CustomUrl;
          openInNewTab: boolean | null;
          href: string | null;
        } | null;
        faqs: Array<{
          title: string;
          _id: string;
          _type: "faq";
          richText: Array<
            | {
                children?: Array<{
                  marks?: Array<string>;
                  text?: string;
                  _type: "span";
                  _key: string;
                }>;
                style?: "h2" | "h3" | "h4" | "h5" | "h6" | "inline" | "normal";
                listItem?: "bullet" | "number";
                markDefs: Array<
                  | {
                      customLink?: CustomUrl;
                      _type: "customLink";
                      _key: string;
                      openInNewTab: boolean | null;
                      href: string | "#" | null;
                    }
                  | {
                      customLink?: CustomUrl;
                      _type: "customLink";
                      _key: string;
                    }
                > | null;
                level?: number;
                _type: "block";
                _key: string;
              }
            | {
                asset?: {
                  _ref: string;
                  _type: "reference";
                  _weak?: boolean;
                  [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
                };
                media?: unknown;
                hotspot: {
                  x: number;
                  y: number;
                } | null;
                crop: {
                  bottom: number;
                  left: number;
                  right: number;
                  top: number;
                } | null;
                caption: string | null;
                _type: "image";
                _key: string;
                id: string | null;
                preview: string | null;
              }
          > | null;
        }>;
        spacing: SectionSpacing;
      }
    | {
        _key: string;
        _type: "feature";
        badge?: string;
        title?: string;
        richText: Array<
          | {
              children?: Array<{
                marks?: Array<string>;
                text?: string;
                _type: "span";
                _key: string;
              }>;
              style?: "h2" | "h3" | "h4" | "h5" | "h6" | "inline" | "normal";
              listItem?: "bullet" | "number";
              markDefs: Array<
                | {
                    customLink?: CustomUrl;
                    _type: "customLink";
                    _key: string;
                    openInNewTab: boolean | null;
                    href: string | "#" | null;
                  }
                | {
                    customLink?: CustomUrl;
                    _type: "customLink";
                    _key: string;
                  }
              > | null;
              level?: number;
              _type: "block";
              _key: string;
            }
          | {
              asset?: {
                _ref: string;
                _type: "reference";
                _weak?: boolean;
                [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
              };
              media?: unknown;
              hotspot: {
                x: number;
                y: number;
              } | null;
              crop: {
                bottom: number;
                left: number;
                right: number;
                top: number;
              } | null;
              caption: string | null;
              _type: "image";
              _key: string;
              id: string | null;
              preview: string | null;
            }
        > | null;
        image: {
          id: string | null;
          preview: string | null;
          hotspot: {
            x: number;
            y: number;
          } | null;
          crop: {
            bottom: number;
            left: number;
            right: number;
            top: number;
          } | null;
        } | null;
        buttons: Array<{
          text: string | null;
          variant: "default" | "link" | "outline" | "secondary" | null;
          _key: string;
          _type: "button";
          openInNewTab: boolean | null;
          href: string | null;
        }> | null;
        spacing: SectionSpacing;
      }
    | {
        _key: string;
        _type: "featureCardsIcon";
        eyebrow?: string;
        title?: string;
        richText: Array<{
          children?: Array<{
            marks?: Array<string>;
            text?: string;
            _type: "span";
            _key: string;
          }>;
          style?: "h2" | "h3" | "h4" | "h5" | "h6" | "inline" | "normal";
          listItem?: "bullet" | "number";
          markDefs: Array<
            | {
                customLink?: CustomUrl;
                _type: "customLink";
                _key: string;
                openInNewTab: boolean | null;
                href: string | "#" | null;
              }
            | {
                customLink?: CustomUrl;
                _type: "customLink";
                _key: string;
              }
          > | null;
          level?: number;
          _type: "block";
          _key: string;
        }> | null;
        cards: Array<{
          icon?: IconPicker;
          title?: string;
          richText: Array<{
            children?: Array<{
              marks?: Array<string>;
              text?: string;
              _type: "span";
              _key: string;
            }>;
            style?: "h2" | "h3" | "h4" | "h5" | "h6" | "inline" | "normal";
            listItem?: "bullet" | "number";
            markDefs: Array<
              | {
                  customLink?: CustomUrl;
                  _type: "customLink";
                  _key: string;
                  openInNewTab: boolean | null;
                  href: string | "#" | null;
                }
              | {
                  customLink?: CustomUrl;
                  _type: "customLink";
                  _key: string;
                }
            > | null;
            level?: number;
            _type: "block";
            _key: string;
          }> | null;
          _type: "featureCardIcon";
          _key: string;
        }> | null;
        spacing: SectionSpacing;
      }
    | {
        _key: string;
        _type: "imageLinkCards";
        eyebrow?: string;
        title: string;
        richText: Array<
          | {
              children?: Array<{
                marks?: Array<string>;
                text?: string;
                _type: "span";
                _key: string;
              }>;
              style?: "h2" | "h3" | "h4" | "h5" | "h6" | "inline" | "normal";
              listItem?: "bullet" | "number";
              markDefs: Array<
                | {
                    customLink?: CustomUrl;
                    _type: "customLink";
                    _key: string;
                    openInNewTab: boolean | null;
                    href: string | "#" | null;
                  }
                | {
                    customLink?: CustomUrl;
                    _type: "customLink";
                    _key: string;
                  }
              > | null;
              level?: number;
              _type: "block";
              _key: string;
            }
          | {
              asset?: {
                _ref: string;
                _type: "reference";
                _weak?: boolean;
                [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
              };
              media?: unknown;
              hotspot: {
                x: number;
                y: number;
              } | null;
              crop: {
                bottom: number;
                left: number;
                right: number;
                top: number;
              } | null;
              caption: string | null;
              _type: "image";
              _key: string;
              id: string | null;
              preview: string | null;
            }
        > | null;
        buttons: Array<{
          text: string | null;
          variant: "default" | "link" | "outline" | "secondary" | null;
          _key: string;
          _type: "button";
          openInNewTab: boolean | null;
          href: string | null;
        }> | null;
        cards: Array<{
          title: string;
          description: string;
          image: {
            id: string | null;
            preview: string | null;
            hotspot: {
              x: number;
              y: number;
            } | null;
            crop: {
              bottom: number;
              left: number;
              right: number;
              top: number;
            } | null;
          } | null;
          url?: CustomUrl;
          _type: "imageLinkCard";
          _key: string;
          openInNewTab: boolean | null;
          href: string | null;
        }> | null;
        spacing: SectionSpacing;
      }
    | {
        _key: string;
        _type: "subscribeNewsletter";
        title?: string;
        subTitle: Array<{
          children?: Array<{
            marks?: Array<string>;
            text?: string;
            _type: "span";
            _key: string;
          }>;
          style?: "h2" | "h3" | "h4" | "h5" | "h6" | "inline" | "normal";
          listItem?: "bullet" | "number";
          markDefs: Array<
            | {
                customLink?: CustomUrl;
                _type: "customLink";
                _key: string;
                openInNewTab: boolean | null;
                href: string | "#" | null;
              }
            | {
                customLink?: CustomUrl;
                _type: "customLink";
                _key: string;
              }
          > | null;
          level?: number;
          _type: "block";
          _key: string;
        }> | null;
        helperText: Array<{
          children?: Array<{
            marks?: Array<string>;
            text?: string;
            _type: "span";
            _key: string;
          }>;
          style?: "h2" | "h3" | "h4" | "h5" | "h6" | "inline" | "normal";
          listItem?: "bullet" | "number";
          markDefs: Array<
            | {
                customLink?: CustomUrl;
                _type: "customLink";
                _key: string;
                openInNewTab: boolean | null;
                href: string | "#" | null;
              }
            | {
                customLink?: CustomUrl;
                _type: "customLink";
                _key: string;
              }
          > | null;
          level?: number;
          _type: "block";
          _key: string;
        }> | null;
        spacing: SectionSpacing;
      }
  > | null;
  seoTitle?: string;
  seoDescription?: string;
  seoImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  ogTitle?: string;
  ogDescription?: string;
} | null;
// Variable: querySlugPageData
// Query: *[_type == "page" && slug.current == $slug][0]{    ...,    "slug": slug.current,      pageBuilder[]{    ...,      "spacing": {    "spacingTop": coalesce(spacing.spacingTop, "default"),    "spacingBottom": coalesce(spacing.spacingBottom, "default")  },    _type,      _type == "cta" => {    ...,      richText[]{    ...,    _type == "block" => {      ...,        markDefs[]{    ...,      ...customLink{    openInNewTab,    "href": select(      type == "internal" => internal->slug.current,      type == "external" => external,      "#"    ),  }  }    },    _type == "image" => {        "id": asset._ref,  "preview": asset->metadata.lqip,  hotspot {    x,    y  },  crop {    bottom,    left,    right,    top  },      "caption": caption    }  },      buttons[]{    text,    variant,    _key,    _type,    "openInNewTab": url.openInNewTab,    "href": select(      url.type == "internal" => url.internal->slug.current,      url.type == "external" => url.external,      url.href    ),  },  },      _type == "feature" => {    ...,      image {      "id": asset._ref,  "preview": asset->metadata.lqip,  hotspot {    x,    y  },  crop {    bottom,    left,    right,    top  }  },      buttons[]{    text,    variant,    _key,    _type,    "openInNewTab": url.openInNewTab,    "href": select(      url.type == "internal" => url.internal->slug.current,      url.type == "external" => url.external,      url.href    ),  },      richText[]{    ...,    _type == "block" => {      ...,        markDefs[]{    ...,      ...customLink{    openInNewTab,    "href": select(      type == "internal" => internal->slug.current,      type == "external" => external,      "#"    ),  }  }    },    _type == "image" => {        "id": asset._ref,  "preview": asset->metadata.lqip,  hotspot {    x,    y  },  crop {    bottom,    left,    right,    top  },      "caption": caption    }  }  },      _type == "faqAccordion" => {    ...,      "faqs": array::compact(faqs[]->{    title,    _id,    _type,      richText[]{    ...,    _type == "block" => {      ...,        markDefs[]{    ...,      ...customLink{    openInNewTab,    "href": select(      type == "internal" => internal->slug.current,      type == "external" => external,      "#"    ),  }  }    },    _type == "image" => {        "id": asset._ref,  "preview": asset->metadata.lqip,  hotspot {    x,    y  },  crop {    bottom,    left,    right,    top  },      "caption": caption    }  }  }),    link{      ...,      "openInNewTab": url.openInNewTab,      "href": select(        url.type == "internal" => url.internal->slug.current,        url.type == "external" => url.external,        url.href      )    }  },      _type == "featureCardsIcon" => {    ...,      richText[]{    ...,    _type == "block" => {      ...,        markDefs[]{    ...,      ...customLink{    openInNewTab,    "href": select(      type == "internal" => internal->slug.current,      type == "external" => external,      "#"    ),  }  }    },    _type == "image" => {        "id": asset._ref,  "preview": asset->metadata.lqip,  hotspot {    x,    y  },  crop {    bottom,    left,    right,    top  },      "caption": caption    }  },    "cards": array::compact(cards[]{      ...,        richText[]{    ...,    _type == "block" => {      ...,        markDefs[]{    ...,      ...customLink{    openInNewTab,    "href": select(      type == "internal" => internal->slug.current,      type == "external" => external,      "#"    ),  }  }    },    _type == "image" => {        "id": asset._ref,  "preview": asset->metadata.lqip,  hotspot {    x,    y  },  crop {    bottom,    left,    right,    top  },      "caption": caption    }  },    })  },      _type == "subscribeNewsletter" => {    ...,    "subTitle": subTitle[]{      ...,        markDefs[]{    ...,      ...customLink{    openInNewTab,    "href": select(      type == "internal" => internal->slug.current,      type == "external" => external,      "#"    ),  }  }    },    "helperText": helperText[]{      ...,        markDefs[]{    ...,      ...customLink{    openInNewTab,    "href": select(      type == "internal" => internal->slug.current,      type == "external" => external,      "#"    ),  }  }    }  },      _type == "imageLinkCards" => {    ...,      richText[]{    ...,    _type == "block" => {      ...,        markDefs[]{    ...,      ...customLink{    openInNewTab,    "href": select(      type == "internal" => internal->slug.current,      type == "external" => external,      "#"    ),  }  }    },    _type == "image" => {        "id": asset._ref,  "preview": asset->metadata.lqip,  hotspot {    x,    y  },  crop {    bottom,    left,    right,    top  },      "caption": caption    }  },      buttons[]{    text,    variant,    _key,    _type,    "openInNewTab": url.openInNewTab,    "href": select(      url.type == "internal" => url.internal->slug.current,      url.type == "external" => url.external,      url.href    ),  },    "cards": array::compact(cards[]{      ...,      "openInNewTab": url.openInNewTab,      "href": select(        url.type == "internal" => url.internal->slug.current,        url.type == "external" => url.external,        url.href      ),        image {      "id": asset._ref,  "preview": asset->metadata.lqip,  hotspot {    x,    y  },  crop {    bottom,    left,    right,    top  }  },    })  }  }  }
export type QuerySlugPageDataResult = {
  _id: string;
  _type: "page";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  description?: string;
  slug: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  pageBuilder: Array<
    | {
        _key: string;
        _type: "cta";
        eyebrow?: string;
        title?: string;
        richText: Array<
          | {
              children?: Array<{
                marks?: Array<string>;
                text?: string;
                _type: "span";
                _key: string;
              }>;
              style?: "h2" | "h3" | "h4" | "h5" | "h6" | "inline" | "normal";
              listItem?: "bullet" | "number";
              markDefs: Array<
                | {
                    customLink?: CustomUrl;
                    _type: "customLink";
                    _key: string;
                    openInNewTab: boolean | null;
                    href: string | "#" | null;
                  }
                | {
                    customLink?: CustomUrl;
                    _type: "customLink";
                    _key: string;
                  }
              > | null;
              level?: number;
              _type: "block";
              _key: string;
            }
          | {
              asset?: {
                _ref: string;
                _type: "reference";
                _weak?: boolean;
                [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
              };
              media?: unknown;
              hotspot: {
                x: number;
                y: number;
              } | null;
              crop: {
                bottom: number;
                left: number;
                right: number;
                top: number;
              } | null;
              caption: string | null;
              _type: "image";
              _key: string;
              id: string | null;
              preview: string | null;
            }
        > | null;
        buttons: Array<{
          text: string | null;
          variant: "default" | "link" | "outline" | "secondary" | null;
          _key: string;
          _type: "button";
          openInNewTab: boolean | null;
          href: string | null;
        }> | null;
        spacing: SectionSpacing;
      }
    | {
        _key: string;
        _type: "faqAccordion";
        eyebrow?: string;
        title: string;
        subtitle?: string;
        link: {
          title?: string;
          description?: string;
          url?: CustomUrl;
          openInNewTab: boolean | null;
          href: string | null;
        } | null;
        faqs: Array<{
          title: string;
          _id: string;
          _type: "faq";
          richText: Array<
            | {
                children?: Array<{
                  marks?: Array<string>;
                  text?: string;
                  _type: "span";
                  _key: string;
                }>;
                style?: "h2" | "h3" | "h4" | "h5" | "h6" | "inline" | "normal";
                listItem?: "bullet" | "number";
                markDefs: Array<
                  | {
                      customLink?: CustomUrl;
                      _type: "customLink";
                      _key: string;
                      openInNewTab: boolean | null;
                      href: string | "#" | null;
                    }
                  | {
                      customLink?: CustomUrl;
                      _type: "customLink";
                      _key: string;
                    }
                > | null;
                level?: number;
                _type: "block";
                _key: string;
              }
            | {
                asset?: {
                  _ref: string;
                  _type: "reference";
                  _weak?: boolean;
                  [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
                };
                media?: unknown;
                hotspot: {
                  x: number;
                  y: number;
                } | null;
                crop: {
                  bottom: number;
                  left: number;
                  right: number;
                  top: number;
                } | null;
                caption: string | null;
                _type: "image";
                _key: string;
                id: string | null;
                preview: string | null;
              }
          > | null;
        }>;
        spacing: SectionSpacing;
      }
    | {
        _key: string;
        _type: "feature";
        badge?: string;
        title?: string;
        richText: Array<
          | {
              children?: Array<{
                marks?: Array<string>;
                text?: string;
                _type: "span";
                _key: string;
              }>;
              style?: "h2" | "h3" | "h4" | "h5" | "h6" | "inline" | "normal";
              listItem?: "bullet" | "number";
              markDefs: Array<
                | {
                    customLink?: CustomUrl;
                    _type: "customLink";
                    _key: string;
                    openInNewTab: boolean | null;
                    href: string | "#" | null;
                  }
                | {
                    customLink?: CustomUrl;
                    _type: "customLink";
                    _key: string;
                  }
              > | null;
              level?: number;
              _type: "block";
              _key: string;
            }
          | {
              asset?: {
                _ref: string;
                _type: "reference";
                _weak?: boolean;
                [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
              };
              media?: unknown;
              hotspot: {
                x: number;
                y: number;
              } | null;
              crop: {
                bottom: number;
                left: number;
                right: number;
                top: number;
              } | null;
              caption: string | null;
              _type: "image";
              _key: string;
              id: string | null;
              preview: string | null;
            }
        > | null;
        image: {
          id: string | null;
          preview: string | null;
          hotspot: {
            x: number;
            y: number;
          } | null;
          crop: {
            bottom: number;
            left: number;
            right: number;
            top: number;
          } | null;
        } | null;
        buttons: Array<{
          text: string | null;
          variant: "default" | "link" | "outline" | "secondary" | null;
          _key: string;
          _type: "button";
          openInNewTab: boolean | null;
          href: string | null;
        }> | null;
        spacing: SectionSpacing;
      }
    | {
        _key: string;
        _type: "featureCardsIcon";
        eyebrow?: string;
        title?: string;
        richText: Array<{
          children?: Array<{
            marks?: Array<string>;
            text?: string;
            _type: "span";
            _key: string;
          }>;
          style?: "h2" | "h3" | "h4" | "h5" | "h6" | "inline" | "normal";
          listItem?: "bullet" | "number";
          markDefs: Array<
            | {
                customLink?: CustomUrl;
                _type: "customLink";
                _key: string;
                openInNewTab: boolean | null;
                href: string | "#" | null;
              }
            | {
                customLink?: CustomUrl;
                _type: "customLink";
                _key: string;
              }
          > | null;
          level?: number;
          _type: "block";
          _key: string;
        }> | null;
        cards: Array<{
          icon?: IconPicker;
          title?: string;
          richText: Array<{
            children?: Array<{
              marks?: Array<string>;
              text?: string;
              _type: "span";
              _key: string;
            }>;
            style?: "h2" | "h3" | "h4" | "h5" | "h6" | "inline" | "normal";
            listItem?: "bullet" | "number";
            markDefs: Array<
              | {
                  customLink?: CustomUrl;
                  _type: "customLink";
                  _key: string;
                  openInNewTab: boolean | null;
                  href: string | "#" | null;
                }
              | {
                  customLink?: CustomUrl;
                  _type: "customLink";
                  _key: string;
                }
            > | null;
            level?: number;
            _type: "block";
            _key: string;
          }> | null;
          _type: "featureCardIcon";
          _key: string;
        }> | null;
        spacing: SectionSpacing;
      }
    | {
        _key: string;
        _type: "imageLinkCards";
        eyebrow?: string;
        title: string;
        richText: Array<
          | {
              children?: Array<{
                marks?: Array<string>;
                text?: string;
                _type: "span";
                _key: string;
              }>;
              style?: "h2" | "h3" | "h4" | "h5" | "h6" | "inline" | "normal";
              listItem?: "bullet" | "number";
              markDefs: Array<
                | {
                    customLink?: CustomUrl;
                    _type: "customLink";
                    _key: string;
                    openInNewTab: boolean | null;
                    href: string | "#" | null;
                  }
                | {
                    customLink?: CustomUrl;
                    _type: "customLink";
                    _key: string;
                  }
              > | null;
              level?: number;
              _type: "block";
              _key: string;
            }
          | {
              asset?: {
                _ref: string;
                _type: "reference";
                _weak?: boolean;
                [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
              };
              media?: unknown;
              hotspot: {
                x: number;
                y: number;
              } | null;
              crop: {
                bottom: number;
                left: number;
                right: number;
                top: number;
              } | null;
              caption: string | null;
              _type: "image";
              _key: string;
              id: string | null;
              preview: string | null;
            }
        > | null;
        buttons: Array<{
          text: string | null;
          variant: "default" | "link" | "outline" | "secondary" | null;
          _key: string;
          _type: "button";
          openInNewTab: boolean | null;
          href: string | null;
        }> | null;
        cards: Array<{
          title: string;
          description: string;
          image: {
            id: string | null;
            preview: string | null;
            hotspot: {
              x: number;
              y: number;
            } | null;
            crop: {
              bottom: number;
              left: number;
              right: number;
              top: number;
            } | null;
          } | null;
          url?: CustomUrl;
          _type: "imageLinkCard";
          _key: string;
          openInNewTab: boolean | null;
          href: string | null;
        }> | null;
        spacing: SectionSpacing;
      }
    | {
        _key: string;
        _type: "subscribeNewsletter";
        title?: string;
        subTitle: Array<{
          children?: Array<{
            marks?: Array<string>;
            text?: string;
            _type: "span";
            _key: string;
          }>;
          style?: "h2" | "h3" | "h4" | "h5" | "h6" | "inline" | "normal";
          listItem?: "bullet" | "number";
          markDefs: Array<
            | {
                customLink?: CustomUrl;
                _type: "customLink";
                _key: string;
                openInNewTab: boolean | null;
                href: string | "#" | null;
              }
            | {
                customLink?: CustomUrl;
                _type: "customLink";
                _key: string;
              }
          > | null;
          level?: number;
          _type: "block";
          _key: string;
        }> | null;
        helperText: Array<{
          children?: Array<{
            marks?: Array<string>;
            text?: string;
            _type: "span";
            _key: string;
          }>;
          style?: "h2" | "h3" | "h4" | "h5" | "h6" | "inline" | "normal";
          listItem?: "bullet" | "number";
          markDefs: Array<
            | {
                customLink?: CustomUrl;
                _type: "customLink";
                _key: string;
                openInNewTab: boolean | null;
                href: string | "#" | null;
              }
            | {
                customLink?: CustomUrl;
                _type: "customLink";
                _key: string;
              }
          > | null;
          level?: number;
          _type: "block";
          _key: string;
        }> | null;
        spacing: SectionSpacing;
      }
  > | null;
  seoTitle?: string;
  seoDescription?: string;
  seoImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  seoNoIndex?: boolean;
  ogTitle?: string;
  ogDescription?: string;
} | null;
// Variable: querySlugPagePaths
// Query: *[_type == "page" && defined(slug.current)].slug.current
export type QuerySlugPagePathsResult = Array<string>;
// Variable: queryBlogIndexPageData
// Query: *[_type == "blogIndex"][0]{    ...,    _id,    _type,    title,    description,    "displayFeaturedBlogs" : displayFeaturedBlogs == "yes",    "featuredBlogsCount" : featuredBlogsCount,      pageBuilder[]{    ...,      "spacing": {    "spacingTop": coalesce(spacing.spacingTop, "default"),    "spacingBottom": coalesce(spacing.spacingBottom, "default")  },    _type,      _type == "cta" => {    ...,      richText[]{    ...,    _type == "block" => {      ...,        markDefs[]{    ...,      ...customLink{    openInNewTab,    "href": select(      type == "internal" => internal->slug.current,      type == "external" => external,      "#"    ),  }  }    },    _type == "image" => {        "id": asset._ref,  "preview": asset->metadata.lqip,  hotspot {    x,    y  },  crop {    bottom,    left,    right,    top  },      "caption": caption    }  },      buttons[]{    text,    variant,    _key,    _type,    "openInNewTab": url.openInNewTab,    "href": select(      url.type == "internal" => url.internal->slug.current,      url.type == "external" => url.external,      url.href    ),  },  },      _type == "feature" => {    ...,      image {      "id": asset._ref,  "preview": asset->metadata.lqip,  hotspot {    x,    y  },  crop {    bottom,    left,    right,    top  }  },      buttons[]{    text,    variant,    _key,    _type,    "openInNewTab": url.openInNewTab,    "href": select(      url.type == "internal" => url.internal->slug.current,      url.type == "external" => url.external,      url.href    ),  },      richText[]{    ...,    _type == "block" => {      ...,        markDefs[]{    ...,      ...customLink{    openInNewTab,    "href": select(      type == "internal" => internal->slug.current,      type == "external" => external,      "#"    ),  }  }    },    _type == "image" => {        "id": asset._ref,  "preview": asset->metadata.lqip,  hotspot {    x,    y  },  crop {    bottom,    left,    right,    top  },      "caption": caption    }  }  },      _type == "faqAccordion" => {    ...,      "faqs": array::compact(faqs[]->{    title,    _id,    _type,      richText[]{    ...,    _type == "block" => {      ...,        markDefs[]{    ...,      ...customLink{    openInNewTab,    "href": select(      type == "internal" => internal->slug.current,      type == "external" => external,      "#"    ),  }  }    },    _type == "image" => {        "id": asset._ref,  "preview": asset->metadata.lqip,  hotspot {    x,    y  },  crop {    bottom,    left,    right,    top  },      "caption": caption    }  }  }),    link{      ...,      "openInNewTab": url.openInNewTab,      "href": select(        url.type == "internal" => url.internal->slug.current,        url.type == "external" => url.external,        url.href      )    }  },      _type == "featureCardsIcon" => {    ...,      richText[]{    ...,    _type == "block" => {      ...,        markDefs[]{    ...,      ...customLink{    openInNewTab,    "href": select(      type == "internal" => internal->slug.current,      type == "external" => external,      "#"    ),  }  }    },    _type == "image" => {        "id": asset._ref,  "preview": asset->metadata.lqip,  hotspot {    x,    y  },  crop {    bottom,    left,    right,    top  },      "caption": caption    }  },    "cards": array::compact(cards[]{      ...,        richText[]{    ...,    _type == "block" => {      ...,        markDefs[]{    ...,      ...customLink{    openInNewTab,    "href": select(      type == "internal" => internal->slug.current,      type == "external" => external,      "#"    ),  }  }    },    _type == "image" => {        "id": asset._ref,  "preview": asset->metadata.lqip,  hotspot {    x,    y  },  crop {    bottom,    left,    right,    top  },      "caption": caption    }  },    })  },      _type == "subscribeNewsletter" => {    ...,    "subTitle": subTitle[]{      ...,        markDefs[]{    ...,      ...customLink{    openInNewTab,    "href": select(      type == "internal" => internal->slug.current,      type == "external" => external,      "#"    ),  }  }    },    "helperText": helperText[]{      ...,        markDefs[]{    ...,      ...customLink{    openInNewTab,    "href": select(      type == "internal" => internal->slug.current,      type == "external" => external,      "#"    ),  }  }    }  },      _type == "imageLinkCards" => {    ...,      richText[]{    ...,    _type == "block" => {      ...,        markDefs[]{    ...,      ...customLink{    openInNewTab,    "href": select(      type == "internal" => internal->slug.current,      type == "external" => external,      "#"    ),  }  }    },    _type == "image" => {        "id": asset._ref,  "preview": asset->metadata.lqip,  hotspot {    x,    y  },  crop {    bottom,    left,    right,    top  },      "caption": caption    }  },      buttons[]{    text,    variant,    _key,    _type,    "openInNewTab": url.openInNewTab,    "href": select(      url.type == "internal" => url.internal->slug.current,      url.type == "external" => url.external,      url.href    ),  },    "cards": array::compact(cards[]{      ...,      "openInNewTab": url.openInNewTab,      "href": select(        url.type == "internal" => url.internal->slug.current,        url.type == "external" => url.external,        url.href      ),        image {      "id": asset._ref,  "preview": asset->metadata.lqip,  hotspot {    x,    y  },  crop {    bottom,    left,    right,    top  }  },    })  }  },    "slug": slug.current,    "blogs": *[_type == "blog" && (seoHideFromLists != true)] | order(orderRank asc){        _type,  _id,  title,  description,  "slug":slug.current,  orderRank,    image {      "id": asset._ref,  "preview": asset->metadata.lqip,  hotspot {    x,    y  },  crop {    bottom,    left,    right,    top  }  },  publishedAt,    authors[0]->{    _id,    name,    position,      image {      "id": asset._ref,  "preview": asset->metadata.lqip,  hotspot {    x,    y  },  crop {    bottom,    left,    right,    top  }  }  }    }  }
export type QueryBlogIndexPageDataResult = {
  _id: string;
  _type: "blogIndex";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string | null;
  description: string | null;
  slug: string;
  displayFeaturedBlogs: false | true;
  featuredBlogsCount: "1" | "2" | "3" | null;
  pageBuilder: Array<
    | {
        _key: string;
        _type: "cta";
        eyebrow?: string;
        title?: string;
        richText: Array<
          | {
              children?: Array<{
                marks?: Array<string>;
                text?: string;
                _type: "span";
                _key: string;
              }>;
              style?: "h2" | "h3" | "h4" | "h5" | "h6" | "inline" | "normal";
              listItem?: "bullet" | "number";
              markDefs: Array<
                | {
                    customLink?: CustomUrl;
                    _type: "customLink";
                    _key: string;
                    openInNewTab: boolean | null;
                    href: string | "#" | null;
                  }
                | {
                    customLink?: CustomUrl;
                    _type: "customLink";
                    _key: string;
                  }
              > | null;
              level?: number;
              _type: "block";
              _key: string;
            }
          | {
              asset?: {
                _ref: string;
                _type: "reference";
                _weak?: boolean;
                [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
              };
              media?: unknown;
              hotspot: {
                x: number;
                y: number;
              } | null;
              crop: {
                bottom: number;
                left: number;
                right: number;
                top: number;
              } | null;
              caption: string | null;
              _type: "image";
              _key: string;
              id: string | null;
              preview: string | null;
            }
        > | null;
        buttons: Array<{
          text: string | null;
          variant: "default" | "link" | "outline" | "secondary" | null;
          _key: string;
          _type: "button";
          openInNewTab: boolean | null;
          href: string | null;
        }> | null;
        spacing: SectionSpacing;
      }
    | {
        _key: string;
        _type: "faqAccordion";
        eyebrow?: string;
        title: string;
        subtitle?: string;
        link: {
          title?: string;
          description?: string;
          url?: CustomUrl;
          openInNewTab: boolean | null;
          href: string | null;
        } | null;
        faqs: Array<{
          title: string;
          _id: string;
          _type: "faq";
          richText: Array<
            | {
                children?: Array<{
                  marks?: Array<string>;
                  text?: string;
                  _type: "span";
                  _key: string;
                }>;
                style?: "h2" | "h3" | "h4" | "h5" | "h6" | "inline" | "normal";
                listItem?: "bullet" | "number";
                markDefs: Array<
                  | {
                      customLink?: CustomUrl;
                      _type: "customLink";
                      _key: string;
                      openInNewTab: boolean | null;
                      href: string | "#" | null;
                    }
                  | {
                      customLink?: CustomUrl;
                      _type: "customLink";
                      _key: string;
                    }
                > | null;
                level?: number;
                _type: "block";
                _key: string;
              }
            | {
                asset?: {
                  _ref: string;
                  _type: "reference";
                  _weak?: boolean;
                  [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
                };
                media?: unknown;
                hotspot: {
                  x: number;
                  y: number;
                } | null;
                crop: {
                  bottom: number;
                  left: number;
                  right: number;
                  top: number;
                } | null;
                caption: string | null;
                _type: "image";
                _key: string;
                id: string | null;
                preview: string | null;
              }
          > | null;
        }>;
        spacing: SectionSpacing;
      }
    | {
        _key: string;
        _type: "feature";
        badge?: string;
        title?: string;
        richText: Array<
          | {
              children?: Array<{
                marks?: Array<string>;
                text?: string;
                _type: "span";
                _key: string;
              }>;
              style?: "h2" | "h3" | "h4" | "h5" | "h6" | "inline" | "normal";
              listItem?: "bullet" | "number";
              markDefs: Array<
                | {
                    customLink?: CustomUrl;
                    _type: "customLink";
                    _key: string;
                    openInNewTab: boolean | null;
                    href: string | "#" | null;
                  }
                | {
                    customLink?: CustomUrl;
                    _type: "customLink";
                    _key: string;
                  }
              > | null;
              level?: number;
              _type: "block";
              _key: string;
            }
          | {
              asset?: {
                _ref: string;
                _type: "reference";
                _weak?: boolean;
                [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
              };
              media?: unknown;
              hotspot: {
                x: number;
                y: number;
              } | null;
              crop: {
                bottom: number;
                left: number;
                right: number;
                top: number;
              } | null;
              caption: string | null;
              _type: "image";
              _key: string;
              id: string | null;
              preview: string | null;
            }
        > | null;
        image: {
          id: string | null;
          preview: string | null;
          hotspot: {
            x: number;
            y: number;
          } | null;
          crop: {
            bottom: number;
            left: number;
            right: number;
            top: number;
          } | null;
        } | null;
        buttons: Array<{
          text: string | null;
          variant: "default" | "link" | "outline" | "secondary" | null;
          _key: string;
          _type: "button";
          openInNewTab: boolean | null;
          href: string | null;
        }> | null;
        spacing: SectionSpacing;
      }
    | {
        _key: string;
        _type: "featureCardsIcon";
        eyebrow?: string;
        title?: string;
        richText: Array<{
          children?: Array<{
            marks?: Array<string>;
            text?: string;
            _type: "span";
            _key: string;
          }>;
          style?: "h2" | "h3" | "h4" | "h5" | "h6" | "inline" | "normal";
          listItem?: "bullet" | "number";
          markDefs: Array<
            | {
                customLink?: CustomUrl;
                _type: "customLink";
                _key: string;
                openInNewTab: boolean | null;
                href: string | "#" | null;
              }
            | {
                customLink?: CustomUrl;
                _type: "customLink";
                _key: string;
              }
          > | null;
          level?: number;
          _type: "block";
          _key: string;
        }> | null;
        cards: Array<{
          icon?: IconPicker;
          title?: string;
          richText: Array<{
            children?: Array<{
              marks?: Array<string>;
              text?: string;
              _type: "span";
              _key: string;
            }>;
            style?: "h2" | "h3" | "h4" | "h5" | "h6" | "inline" | "normal";
            listItem?: "bullet" | "number";
            markDefs: Array<
              | {
                  customLink?: CustomUrl;
                  _type: "customLink";
                  _key: string;
                  openInNewTab: boolean | null;
                  href: string | "#" | null;
                }
              | {
                  customLink?: CustomUrl;
                  _type: "customLink";
                  _key: string;
                }
            > | null;
            level?: number;
            _type: "block";
            _key: string;
          }> | null;
          _type: "featureCardIcon";
          _key: string;
        }> | null;
        spacing: SectionSpacing;
      }
    | {
        _key: string;
        _type: "imageLinkCards";
        eyebrow?: string;
        title: string;
        richText: Array<
          | {
              children?: Array<{
                marks?: Array<string>;
                text?: string;
                _type: "span";
                _key: string;
              }>;
              style?: "h2" | "h3" | "h4" | "h5" | "h6" | "inline" | "normal";
              listItem?: "bullet" | "number";
              markDefs: Array<
                | {
                    customLink?: CustomUrl;
                    _type: "customLink";
                    _key: string;
                    openInNewTab: boolean | null;
                    href: string | "#" | null;
                  }
                | {
                    customLink?: CustomUrl;
                    _type: "customLink";
                    _key: string;
                  }
              > | null;
              level?: number;
              _type: "block";
              _key: string;
            }
          | {
              asset?: {
                _ref: string;
                _type: "reference";
                _weak?: boolean;
                [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
              };
              media?: unknown;
              hotspot: {
                x: number;
                y: number;
              } | null;
              crop: {
                bottom: number;
                left: number;
                right: number;
                top: number;
              } | null;
              caption: string | null;
              _type: "image";
              _key: string;
              id: string | null;
              preview: string | null;
            }
        > | null;
        buttons: Array<{
          text: string | null;
          variant: "default" | "link" | "outline" | "secondary" | null;
          _key: string;
          _type: "button";
          openInNewTab: boolean | null;
          href: string | null;
        }> | null;
        cards: Array<{
          title: string;
          description: string;
          image: {
            id: string | null;
            preview: string | null;
            hotspot: {
              x: number;
              y: number;
            } | null;
            crop: {
              bottom: number;
              left: number;
              right: number;
              top: number;
            } | null;
          } | null;
          url?: CustomUrl;
          _type: "imageLinkCard";
          _key: string;
          openInNewTab: boolean | null;
          href: string | null;
        }> | null;
        spacing: SectionSpacing;
      }
    | {
        _key: string;
        _type: "subscribeNewsletter";
        title?: string;
        subTitle: Array<{
          children?: Array<{
            marks?: Array<string>;
            text?: string;
            _type: "span";
            _key: string;
          }>;
          style?: "h2" | "h3" | "h4" | "h5" | "h6" | "inline" | "normal";
          listItem?: "bullet" | "number";
          markDefs: Array<
            | {
                customLink?: CustomUrl;
                _type: "customLink";
                _key: string;
                openInNewTab: boolean | null;
                href: string | "#" | null;
              }
            | {
                customLink?: CustomUrl;
                _type: "customLink";
                _key: string;
              }
          > | null;
          level?: number;
          _type: "block";
          _key: string;
        }> | null;
        helperText: Array<{
          children?: Array<{
            marks?: Array<string>;
            text?: string;
            _type: "span";
            _key: string;
          }>;
          style?: "h2" | "h3" | "h4" | "h5" | "h6" | "inline" | "normal";
          listItem?: "bullet" | "number";
          markDefs: Array<
            | {
                customLink?: CustomUrl;
                _type: "customLink";
                _key: string;
                openInNewTab: boolean | null;
                href: string | "#" | null;
              }
            | {
                customLink?: CustomUrl;
                _type: "customLink";
                _key: string;
              }
          > | null;
          level?: number;
          _type: "block";
          _key: string;
        }> | null;
        spacing: SectionSpacing;
      }
  > | null;
  seoTitle?: string;
  seoDescription?: string;
  seoImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  ogTitle?: string;
  ogDescription?: string;
  blogs: Array<{
    _type: "blog";
    _id: string;
    title: string;
    description: string | null;
    slug: string;
    orderRank: string | null;
    image: {
      id: string | null;
      preview: string | null;
      hotspot: {
        x: number;
        y: number;
      } | null;
      crop: {
        bottom: number;
        left: number;
        right: number;
        top: number;
      } | null;
    };
    publishedAt: string | null;
    authors: {
      _id: string;
      name: string;
      position: string | null;
      image: {
        id: string | null;
        preview: string | null;
        hotspot: {
          x: number;
          y: number;
        } | null;
        crop: {
          bottom: number;
          left: number;
          right: number;
          top: number;
        } | null;
      } | null;
    } | null;
  }>;
} | null;
// Variable: queryBlogSlugPageData
// Query: *[_type == "blog" && slug.current == $slug][0]{    ...,    "slug": slug.current,      authors[0]->{    _id,    name,    position,      image {      "id": asset._ref,  "preview": asset->metadata.lqip,  hotspot {    x,    y  },  crop {    bottom,    left,    right,    top  }  }  },      image {      "id": asset._ref,  "preview": asset->metadata.lqip,  hotspot {    x,    y  },  crop {    bottom,    left,    right,    top  }  },      richText[]{    ...,    _type == "block" => {      ...,        markDefs[]{    ...,      ...customLink{    openInNewTab,    "href": select(      type == "internal" => internal->slug.current,      type == "external" => external,      "#"    ),  }  }    },    _type == "image" => {        "id": asset._ref,  "preview": asset->metadata.lqip,  hotspot {    x,    y  },  crop {    bottom,    left,    right,    top  },      "caption": caption    }  },      pageBuilder[]{    ...,      "spacing": {    "spacingTop": coalesce(spacing.spacingTop, "default"),    "spacingBottom": coalesce(spacing.spacingBottom, "default")  },    _type,      _type == "cta" => {    ...,      richText[]{    ...,    _type == "block" => {      ...,        markDefs[]{    ...,      ...customLink{    openInNewTab,    "href": select(      type == "internal" => internal->slug.current,      type == "external" => external,      "#"    ),  }  }    },    _type == "image" => {        "id": asset._ref,  "preview": asset->metadata.lqip,  hotspot {    x,    y  },  crop {    bottom,    left,    right,    top  },      "caption": caption    }  },      buttons[]{    text,    variant,    _key,    _type,    "openInNewTab": url.openInNewTab,    "href": select(      url.type == "internal" => url.internal->slug.current,      url.type == "external" => url.external,      url.href    ),  },  },      _type == "feature" => {    ...,      image {      "id": asset._ref,  "preview": asset->metadata.lqip,  hotspot {    x,    y  },  crop {    bottom,    left,    right,    top  }  },      buttons[]{    text,    variant,    _key,    _type,    "openInNewTab": url.openInNewTab,    "href": select(      url.type == "internal" => url.internal->slug.current,      url.type == "external" => url.external,      url.href    ),  },      richText[]{    ...,    _type == "block" => {      ...,        markDefs[]{    ...,      ...customLink{    openInNewTab,    "href": select(      type == "internal" => internal->slug.current,      type == "external" => external,      "#"    ),  }  }    },    _type == "image" => {        "id": asset._ref,  "preview": asset->metadata.lqip,  hotspot {    x,    y  },  crop {    bottom,    left,    right,    top  },      "caption": caption    }  }  },      _type == "faqAccordion" => {    ...,      "faqs": array::compact(faqs[]->{    title,    _id,    _type,      richText[]{    ...,    _type == "block" => {      ...,        markDefs[]{    ...,      ...customLink{    openInNewTab,    "href": select(      type == "internal" => internal->slug.current,      type == "external" => external,      "#"    ),  }  }    },    _type == "image" => {        "id": asset._ref,  "preview": asset->metadata.lqip,  hotspot {    x,    y  },  crop {    bottom,    left,    right,    top  },      "caption": caption    }  }  }),    link{      ...,      "openInNewTab": url.openInNewTab,      "href": select(        url.type == "internal" => url.internal->slug.current,        url.type == "external" => url.external,        url.href      )    }  },      _type == "featureCardsIcon" => {    ...,      richText[]{    ...,    _type == "block" => {      ...,        markDefs[]{    ...,      ...customLink{    openInNewTab,    "href": select(      type == "internal" => internal->slug.current,      type == "external" => external,      "#"    ),  }  }    },    _type == "image" => {        "id": asset._ref,  "preview": asset->metadata.lqip,  hotspot {    x,    y  },  crop {    bottom,    left,    right,    top  },      "caption": caption    }  },    "cards": array::compact(cards[]{      ...,        richText[]{    ...,    _type == "block" => {      ...,        markDefs[]{    ...,      ...customLink{    openInNewTab,    "href": select(      type == "internal" => internal->slug.current,      type == "external" => external,      "#"    ),  }  }    },    _type == "image" => {        "id": asset._ref,  "preview": asset->metadata.lqip,  hotspot {    x,    y  },  crop {    bottom,    left,    right,    top  },      "caption": caption    }  },    })  },      _type == "subscribeNewsletter" => {    ...,    "subTitle": subTitle[]{      ...,        markDefs[]{    ...,      ...customLink{    openInNewTab,    "href": select(      type == "internal" => internal->slug.current,      type == "external" => external,      "#"    ),  }  }    },    "helperText": helperText[]{      ...,        markDefs[]{    ...,      ...customLink{    openInNewTab,    "href": select(      type == "internal" => internal->slug.current,      type == "external" => external,      "#"    ),  }  }    }  },      _type == "imageLinkCards" => {    ...,      richText[]{    ...,    _type == "block" => {      ...,        markDefs[]{    ...,      ...customLink{    openInNewTab,    "href": select(      type == "internal" => internal->slug.current,      type == "external" => external,      "#"    ),  }  }    },    _type == "image" => {        "id": asset._ref,  "preview": asset->metadata.lqip,  hotspot {    x,    y  },  crop {    bottom,    left,    right,    top  },      "caption": caption    }  },      buttons[]{    text,    variant,    _key,    _type,    "openInNewTab": url.openInNewTab,    "href": select(      url.type == "internal" => url.internal->slug.current,      url.type == "external" => url.external,      url.href    ),  },    "cards": array::compact(cards[]{      ...,      "openInNewTab": url.openInNewTab,      "href": select(        url.type == "internal" => url.internal->slug.current,        url.type == "external" => url.external,        url.href      ),        image {      "id": asset._ref,  "preview": asset->metadata.lqip,  hotspot {    x,    y  },  crop {    bottom,    left,    right,    top  }  },    })  }  }  }
export type QueryBlogSlugPageDataResult = {
  _id: string;
  _type: "blog";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  orderRank?: string;
  title: string;
  description?: string;
  slug: string;
  authors: {
    _id: string;
    name: string;
    position: string | null;
    image: {
      id: string | null;
      preview: string | null;
      hotspot: {
        x: number;
        y: number;
      } | null;
      crop: {
        bottom: number;
        left: number;
        right: number;
        top: number;
      } | null;
    } | null;
  } | null;
  publishedAt?: string;
  image: {
    id: string | null;
    preview: string | null;
    hotspot: {
      x: number;
      y: number;
    } | null;
    crop: {
      bottom: number;
      left: number;
      right: number;
      top: number;
    } | null;
  };
  richText: Array<
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "h2" | "h3" | "h4" | "h5" | "h6" | "inline" | "normal";
        listItem?: "bullet" | "number";
        markDefs: Array<
          | {
              customLink?: CustomUrl;
              _type: "customLink";
              _key: string;
              openInNewTab: boolean | null;
              href: string | "#" | null;
            }
          | {
              customLink?: CustomUrl;
              _type: "customLink";
              _key: string;
            }
        > | null;
        level?: number;
        _type: "block";
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot: {
          x: number;
          y: number;
        } | null;
        crop: {
          bottom: number;
          left: number;
          right: number;
          top: number;
        } | null;
        caption: string | null;
        _type: "image";
        _key: string;
        id: string | null;
        preview: string | null;
      }
  > | null;
  seoTitle?: string;
  seoDescription?: string;
  seoImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  seoNoIndex?: boolean;
  seoHideFromLists?: boolean;
  ogTitle?: string;
  ogDescription?: string;
  pageBuilder: null;
} | null;
// Variable: queryBlogPaths
// Query: *[_type == "blog" && defined(slug.current)].slug.current
export type QueryBlogPathsResult = Array<string>;
// Variable: queryHomePageOGData
// Query: *[_type == "homePage" && _id == $id][0]{      _id,  _type,  "title": coalesce(string(select(    defined(ogTitle) => ogTitle,    defined(seoTitle) => seoTitle,    _type == "sauce" => name,    _type == "product" => name,    _type == "recipe" => name,    title  )), ""),  "description": coalesce(string(select(    defined(ogDescription) => ogDescription,    defined(seoDescription) => seoDescription,    _type == "sauce" => pt::text(description),    _type == "product" => coalesce(pt::text(description), name),    _type == "recipe" => coalesce(pt::text(description), name),    description  )), ""),  // Prefer mainImage (product/recipe) and fall back to image  "image": coalesce(    mainImage.asset->url,    image.asset->url  ) + "?w=566&h=566&dpr=2&fit=max",  "dominantColor": coalesce(    mainImage.asset->metadata.palette.dominant.background,    image.asset->metadata.palette.dominant.background  ),  "seoImage": seoImage.asset->url + "?w=1200&h=630&dpr=2&fit=max",  "date": coalesce(date, _createdAt)  }
export type QueryHomePageOGDataResult = {
  _id: string;
  _type: "homePage";
  title: string | "";
  description: string | "";
  image: null;
  dominantColor: null;
  seoImage: string | null;
  date: string;
} | null;
// Variable: querySlugPageOGData
// Query: *[_type == "page" && _id == $id][0]{      _id,  _type,  "title": coalesce(string(select(    defined(ogTitle) => ogTitle,    defined(seoTitle) => seoTitle,    _type == "sauce" => name,    _type == "product" => name,    _type == "recipe" => name,    title  )), ""),  "description": coalesce(string(select(    defined(ogDescription) => ogDescription,    defined(seoDescription) => seoDescription,    _type == "sauce" => pt::text(description),    _type == "product" => coalesce(pt::text(description), name),    _type == "recipe" => coalesce(pt::text(description), name),    description  )), ""),  // Prefer mainImage (product/recipe) and fall back to image  "image": coalesce(    mainImage.asset->url,    image.asset->url  ) + "?w=566&h=566&dpr=2&fit=max",  "dominantColor": coalesce(    mainImage.asset->metadata.palette.dominant.background,    image.asset->metadata.palette.dominant.background  ),  "seoImage": seoImage.asset->url + "?w=1200&h=630&dpr=2&fit=max",  "date": coalesce(date, _createdAt)  }
export type QuerySlugPageOGDataResult = {
  _id: string;
  _type: "page";
  title: string | "";
  description: string | "";
  image: string | null;
  dominantColor: string | null;
  seoImage: string | null;
  date: string;
} | null;
// Variable: queryBlogPageOGData
// Query: *[_type == "blog" && _id == $id][0]{      _id,  _type,  "title": coalesce(string(select(    defined(ogTitle) => ogTitle,    defined(seoTitle) => seoTitle,    _type == "sauce" => name,    _type == "product" => name,    _type == "recipe" => name,    title  )), ""),  "description": coalesce(string(select(    defined(ogDescription) => ogDescription,    defined(seoDescription) => seoDescription,    _type == "sauce" => pt::text(description),    _type == "product" => coalesce(pt::text(description), name),    _type == "recipe" => coalesce(pt::text(description), name),    description  )), ""),  // Prefer mainImage (product/recipe) and fall back to image  "image": coalesce(    mainImage.asset->url,    image.asset->url  ) + "?w=566&h=566&dpr=2&fit=max",  "dominantColor": coalesce(    mainImage.asset->metadata.palette.dominant.background,    image.asset->metadata.palette.dominant.background  ),  "seoImage": seoImage.asset->url + "?w=1200&h=630&dpr=2&fit=max",  "date": coalesce(date, _createdAt)  }
export type QueryBlogPageOGDataResult = {
  _id: string;
  _type: "blog";
  title: string | "";
  description: string | "";
  image: string | null;
  dominantColor: string | null;
  seoImage: string | null;
  date: string;
} | null;
// Variable: queryGenericPageOGData
// Query: *[ defined(slug.current) && _id == $id][0]{      _id,  _type,  "title": coalesce(string(select(    defined(ogTitle) => ogTitle,    defined(seoTitle) => seoTitle,    _type == "sauce" => name,    _type == "product" => name,    _type == "recipe" => name,    title  )), ""),  "description": coalesce(string(select(    defined(ogDescription) => ogDescription,    defined(seoDescription) => seoDescription,    _type == "sauce" => pt::text(description),    _type == "product" => coalesce(pt::text(description), name),    _type == "recipe" => coalesce(pt::text(description), name),    description  )), ""),  // Prefer mainImage (product/recipe) and fall back to image  "image": coalesce(    mainImage.asset->url,    image.asset->url  ) + "?w=566&h=566&dpr=2&fit=max",  "dominantColor": coalesce(    mainImage.asset->metadata.palette.dominant.background,    image.asset->metadata.palette.dominant.background  ),  "seoImage": seoImage.asset->url + "?w=1200&h=630&dpr=2&fit=max",  "date": coalesce(date, _createdAt)  }
export type QueryGenericPageOGDataResult =
  | {
      _id: string;
      _type: "blog";
      title: string | "";
      description: string | "";
      image: string | null;
      dominantColor: string | null;
      seoImage: string | null;
      date: string;
    }
  | {
      _id: string;
      _type: "blogIndex";
      title: string | "";
      description: string | "";
      image: null;
      dominantColor: null;
      seoImage: string | null;
      date: string;
    }
  | {
      _id: string;
      _type: "homePage";
      title: string | "";
      description: string | "";
      image: null;
      dominantColor: null;
      seoImage: string | null;
      date: string;
    }
  | {
      _id: string;
      _type: "page";
      title: string | "";
      description: string | "";
      image: string | null;
      dominantColor: string | null;
      seoImage: string | null;
      date: string;
    }
  | {
      _id: string;
      _type: "product";
      title: string;
      description: string;
      image: string | null;
      dominantColor: string | null;
      seoImage: null;
      date: string;
    }
  | {
      _id: string;
      _type: "productIndex";
      title: string | "";
      description: string | "";
      image: null;
      dominantColor: null;
      seoImage: string | null;
      date: string;
    }
  | {
      _id: string;
      _type: "recipe";
      title: string;
      description: string;
      image: string | null;
      dominantColor: string | null;
      seoImage: null;
      date: string;
    }
  | {
      _id: string;
      _type: "recipeCategory";
      title: string;
      description: "";
      image: null;
      dominantColor: null;
      seoImage: null;
      date: string;
    }
  | {
      _id: string;
      _type: "recipeIndex";
      title: string | "";
      description: string | "";
      image: null;
      dominantColor: null;
      seoImage: string | null;
      date: string;
    }
  | {
      _id: string;
      _type: "sauce";
      title: string;
      description: string;
      image: string | null;
      dominantColor: string | null;
      seoImage: null;
      date: string;
    }
  | {
      _id: string;
      _type: "sauceIndex";
      title: string | "";
      description: string | "";
      image: null;
      dominantColor: null;
      seoImage: string | null;
      date: string;
    }
  | null;
// Variable: queryFooterData
// Query: *[_type == "footer" && _id == "footer"][0]{    _id,    subtitle,    columns[]{      _key,      title,      links[]{        _key,        name,        "openInNewTab": url.openInNewTab,        "href": select(          url.type == "internal" => url.internal->slug.current,          url.type == "external" => url.external,          url.href        ),      }    }  }
export type QueryFooterDataResult = {
  _id: string;
  subtitle: string | null;
  columns: Array<{
    _key: string;
    title: string | null;
    links: Array<{
      _key: string;
      name: string | null;
      openInNewTab: boolean | null;
      href: string | null;
    }> | null;
  }> | null;
} | null;
// Variable: queryNavbarData
// Query: *[_type == "navbar" && _id == "navbar"][0]{    _id,    columns[]{      _key,      _type == "navbarColumn" => {        "type": "column",        title,        links[]{          _key,          name,          icon,          description,          "openInNewTab": url.openInNewTab,          "href": select(            url.type == "internal" => url.internal->slug.current,            url.type == "external" => url.external,            url.href          )        }      },      _type == "navbarLink" => {        "type": "link",        name,        description,        "openInNewTab": url.openInNewTab,        "href": select(          url.type == "internal" => url.internal->slug.current,          url.type == "external" => url.external,          url.href        )      }    },      buttons[]{    text,    variant,    _key,    _type,    "openInNewTab": url.openInNewTab,    "href": select(      url.type == "internal" => url.internal->slug.current,      url.type == "external" => url.external,      url.href    ),  },  }
export type QueryNavbarDataResult = {
  _id: string;
  columns: Array<
    | {
        _key: string;
        type: "link";
        name: string | null;
        description: null;
        openInNewTab: boolean | null;
        href: string | null;
      }
    | {
        _key: string;
        type: "column";
        title: string | null;
        links: Array<{
          _key: string;
          name: string | null;
          icon: IconPicker | null;
          description: string | null;
          openInNewTab: boolean | null;
          href: string | null;
        }>;
      }
  > | null;
  buttons: Array<{
    text: string | null;
    variant: "default" | "link" | "outline" | "secondary" | null;
    _key: string;
    _type: "button";
    openInNewTab: boolean | null;
    href: string | null;
  }> | null;
} | null;
// Variable: querySitemapData
// Query: {  "slugPages": *[_type == "page" && defined(slug.current)]{    "slug": slug.current,    "lastModified": _updatedAt  },  "blogPages": *[_type == "blog" && defined(slug.current)]{    "slug": slug.current,    "lastModified": _updatedAt  },  "saucePages": *[_type == "sauce" && defined(slug.current)]{    "slug": slug.current,    "lastModified": _updatedAt  },  "productPages": *[_type == "product" && defined(slug.current)]{    "slug": slug.current,    "lastModified": _updatedAt  },  "recipePages": *[_type == "recipe" && defined(slug.current)]{    "slug": slug.current,    "lastModified": _updatedAt  }}
export type QuerySitemapDataResult = {
  slugPages: Array<{
    slug: string;
    lastModified: string;
  }>;
  blogPages: Array<{
    slug: string;
    lastModified: string;
  }>;
  saucePages: Array<{
    slug: string;
    lastModified: string;
  }>;
  productPages: Array<{
    slug: string;
    lastModified: string;
  }>;
  recipePages: Array<{
    slug: string;
    lastModified: string;
  }>;
};
// Variable: queryGlobalSeoSettings
// Query: *[_type == "settings"][0]{    _id,    _type,    siteTitle,    siteDescription,    addressLines,    contactEmail,    tollFreePhone,    officePhone,    socialLinks{      linkedin,      facebook,      twitter,      instagram,      youtube    }  }
export type QueryGlobalSeoSettingsResult = {
  _id: string;
  _type: "settings";
  siteTitle: string;
  siteDescription: string;
  addressLines: Array<string> | null;
  contactEmail: string | null;
  tollFreePhone: string | null;
  officePhone: string | null;
  socialLinks: {
    linkedin: string | null;
    facebook: string | null;
    twitter: string | null;
    instagram: string | null;
    youtube: string | null;
  } | null;
} | null;
// Variable: querySettingsData
// Query: *[_type == "settings"][0]{    _id,    _type,    siteTitle,    siteDescription,    "socialLinks": socialLinks,    "contactEmail": contactEmail,  }
export type QuerySettingsDataResult = {
  _id: string;
  _type: "settings";
  siteTitle: string;
  siteDescription: string;
  socialLinks: {
    linkedin?: string;
    facebook?: string;
    twitter?: string;
    instagram?: string;
    youtube?: string;
  } | null;
  contactEmail: string | null;
} | null;
// Variable: getSauceIndexPageQuery
// Query: *[_type == "sauceIndex"][0]{    _id,    _type,    title,    description,    "slug": slug.current  }
export type GetSauceIndexPageQueryResult = {
  _id: string;
  _type: "sauceIndex";
  title: string | null;
  description: string | null;
  slug: string;
} | null;
// Variable: getAllSaucesForIndexQuery
// Query: *[_type == "sauce" && !(_id in path('drafts.**'))] | order(name asc){    _id,    _type,    name,    "slug": slug.current,    line,    category,    "descriptionPlain": pt::text(description),    "mainImage": {      "id": mainImage.asset._ref,      "preview": mainImage.asset->metadata.lqip,      "hotspot": mainImage.hotspot{ x, y },      "crop": mainImage.crop{ top, bottom, left, right },      "alt": mainImage.alt    }  }
export type GetAllSaucesForIndexQueryResult = Array<{
  _id: string;
  _type: "sauce";
  name: string;
  slug: string;
  line: "Organic" | "Original" | "Ultra-Premium";
  category: "Pasta Sauce" | "Pizza Sauce" | "Salsa Sauce" | "Sandwich Sauce";
  descriptionPlain: string;
  mainImage: {
    id: string | null;
    preview: string | null;
    hotspot: {
      x: number;
      y: number;
    } | null;
    crop: {
      top: number;
      bottom: number;
      left: number;
      right: number;
    } | null;
    alt: string | null;
  };
}>;
// Variable: getSaucesByIdsQuery
// Query: *[    _type == "sauce"    && _id in $sauceIds    && defined(slug.current)    && !(_id in path('drafts.**'))  ] | order(name asc){    _id,    _type,    name,    "slug": slug.current,    line,    category,    "descriptionPlain": coalesce(pt::text(description), ""),    "mainImage": mainImage{        "id": asset._ref,  "preview": asset->metadata.lqip,  hotspot {    x,    y  },  crop {    bottom,    left,    right,    top  },      "alt": coalesce(alt, "")    }  }
export type GetSaucesByIdsQueryResult = Array<{
  _id: string;
  _type: "sauce";
  name: string;
  slug: string;
  line: "Organic" | "Original" | "Ultra-Premium";
  category: "Pasta Sauce" | "Pizza Sauce" | "Salsa Sauce" | "Sandwich Sauce";
  descriptionPlain: string;
  mainImage: {
    id: string | null;
    preview: string | null;
    hotspot: {
      x: number;
      y: number;
    } | null;
    crop: {
      bottom: number;
      left: number;
      right: number;
      top: number;
    } | null;
    alt: string | "";
  } | null;
}>;
// Variable: getSauceBySlugQuery
// Query: *[_type == "sauce" && slug.current in [$slug, $prefixedSlug]][0]{    _id,    _type,    name,    "slug": slug.current,    line,    category,    "description": description[]{      ...,      _type == "block" => {        ...,          markDefs[]{    ...,      ...customLink{    openInNewTab,    "href": select(      type == "internal" => internal->slug.current,      type == "external" => external,      "#"    ),  }  }      },      _type == "image" => {          "id": asset._ref,  "preview": asset->metadata.lqip,  hotspot {    x,    y  },  crop {    bottom,    left,    right,    top  },        "caption": caption      }    },    "descriptionPlain": coalesce(pt::text(description), ""),    "mainImage": mainImage{        "id": asset._ref,  "preview": asset->metadata.lqip,  hotspot {    x,    y  },  crop {    bottom,    left,    right,    top  },      "alt": coalesce(alt, "")    },    "labelFlatImage": labelFlatImage{        "id": asset._ref,  "preview": asset->metadata.lqip,  hotspot {    x,    y  },  crop {    bottom,    left,    right,    top  },      "alt": coalesce(alt, "")    },    authorName,    "authorImage": authorImage{        "id": asset._ref,  "preview": asset->metadata.lqip,  hotspot {    x,    y  },  crop {    bottom,    left,    right,    top  },      "alt": coalesce(alt, "")    },    nutritionalInfo,    ingredients,    allergens  }
export type GetSauceBySlugQueryResult = {
  _id: string;
  _type: "sauce";
  name: string;
  slug: string;
  line: "Organic" | "Original" | "Ultra-Premium";
  category: "Pasta Sauce" | "Pizza Sauce" | "Salsa Sauce" | "Sandwich Sauce";
  description: Array<
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "h2" | "h3" | "h4" | "h5" | "h6" | "inline" | "normal";
        listItem?: "bullet" | "number";
        markDefs: Array<
          | {
              customLink?: CustomUrl;
              _type: "customLink";
              _key: string;
              openInNewTab: boolean | null;
              href: string | "#" | null;
            }
          | {
              customLink?: CustomUrl;
              _type: "customLink";
              _key: string;
            }
        > | null;
        level?: number;
        _type: "block";
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot: {
          x: number;
          y: number;
        } | null;
        crop: {
          bottom: number;
          left: number;
          right: number;
          top: number;
        } | null;
        caption: string | null;
        _type: "image";
        _key: string;
        id: string | null;
        preview: string | null;
      }
  >;
  descriptionPlain: string;
  mainImage: {
    id: string | null;
    preview: string | null;
    hotspot: {
      x: number;
      y: number;
    } | null;
    crop: {
      bottom: number;
      left: number;
      right: number;
      top: number;
    } | null;
    alt: string | "";
  } | null;
  labelFlatImage: {
    id: string | null;
    preview: string | null;
    hotspot: {
      x: number;
      y: number;
    } | null;
    crop: {
      bottom: number;
      left: number;
      right: number;
      top: number;
    } | null;
    alt: string | "";
  } | null;
  authorName: string | null;
  authorImage: {
    id: string | null;
    preview: string | null;
    hotspot: {
      x: number;
      y: number;
    } | null;
    crop: {
      bottom: number;
      left: number;
      right: number;
      top: number;
    } | null;
    alt: string | "";
  } | null;
  nutritionalInfo: {
    netWeight?: string;
    servingsPerContainer?: string;
    servingSize?: string;
    gramsPerServing?: string;
    calories?: string;
    totalFat?: string;
    totalFatPerc?: string;
    saturatedFat?: string;
    saturatedFatPerc?: string;
    transFat?: string;
    cholesterol?: string;
    cholesterolPerc?: string;
    sodium?: string;
    sodiumPerc?: string;
    totalCarbohydrate?: string;
    totalCarbohydratePerc?: string;
    dietaryFiber?: string;
    dietaryFiberPerc?: string;
    totalSugars?: string;
    addedSugars?: string;
    addedSugarsPerc?: string;
    protein?: string;
    vitaminD?: string;
    vitaminDPerc?: string;
    calcium?: string;
    calciumPerc?: string;
    iron?: string;
    ironPerc?: string;
    potassium?: string;
    potassiumPerc?: string;
  } | null;
  ingredients: string | null;
  allergens: string | null;
} | null;
// Variable: getRecipeIndexPageQuery
// Query: *[_type == "recipeIndex"][0]{    _id,    _type,    title,    description,    "slug": slug.current  }
export type GetRecipeIndexPageQueryResult = {
  _id: string;
  _type: "recipeIndex";
  title: string | null;
  description: string | null;
  slug: string;
} | null;
// Variable: getAllRecipesForIndexQuery
// Query: *[_type == "recipe" && !(_id in path('drafts.**'))] | order(name asc){    _id,    name,    "slug": slug.current,    tags,    meat,    versions,    "categories": array::compact(categories[]->{ _id, title, slug }),    "descriptionPlain": "",    "mainImage": {      "id": coalesce(mainImage.asset._ref, ""),      "preview": mainImage.asset->metadata.lqip,      "hotspot": mainImage.hotspot{ x, y },      "crop": mainImage.crop{ top, bottom, left, right }    },    // Compute unique product lines from both DGF and LFD sauces    "sauceLines": array::unique((array::compact(dgfSauces[]->line) + array::compact(lfdSauces[]->line)))  }
export type GetAllRecipesForIndexQueryResult = Array<{
  _id: string;
  name: string;
  slug: string;
  tags: Array<string> | null;
  meat: Array<string> | null;
  versions: Array<string>;
  categories: Array<{
    _id: string;
    title: string;
    slug: Slug;
  }> | null;
  descriptionPlain: "";
  mainImage: {
    id: string | "";
    preview: string | null;
    hotspot: {
      x: number;
      y: number;
    } | null;
    crop: {
      top: number;
      bottom: number;
      left: number;
      right: number;
    } | null;
  };
  sauceLines: Array<"Organic" | "Original" | "Ultra-Premium"> | null;
}>;
// Variable: getRecipesBySauceIdQuery
// Query: *[    _type == "recipe"    && defined(slug.current)    && !(_id in path('drafts.**'))    && $sauceId != null    && references($sauceId)  ] | order(name asc){    _id,    name,    "slug": slug.current,    tags,    meat,    versions,    "categories": array::compact(categories[]->{ _id, title, slug }),    "descriptionPlain": "",    "mainImage": {      "id": coalesce(mainImage.asset._ref, ""),      "preview": mainImage.asset->metadata.lqip,      "hotspot": mainImage.hotspot{ x, y },      "crop": mainImage.crop{ top, bottom, left, right }    },    // Compute unique product lines from both DGF and LFD sauces    "sauceLines": array::unique((array::compact(dgfSauces[]->line) + array::compact(lfdSauces[]->line)))  }
export type GetRecipesBySauceIdQueryResult = Array<{
  _id: string;
  name: string;
  slug: string;
  tags: Array<string> | null;
  meat: Array<string> | null;
  versions: Array<string>;
  categories: Array<{
    _id: string;
    title: string;
    slug: Slug;
  }> | null;
  descriptionPlain: "";
  mainImage: {
    id: string | "";
    preview: string | null;
    hotspot: {
      x: number;
      y: number;
    } | null;
    crop: {
      top: number;
      bottom: number;
      left: number;
      right: number;
    } | null;
  };
  sauceLines: Array<"Organic" | "Original" | "Ultra-Premium"> | null;
}>;
// Variable: getRecipesBySauceIdsQuery
// Query: *[    _type == "recipe"    && defined(slug.current)    && !(_id in path('drafts.**'))    && $sauceIds != null    && count($sauceIds) > 0    && count((coalesce(dgfSauces[]._ref, []) + coalesce(lfdSauces[]._ref, []))[@ in $sauceIds]) > 0  ] | order(name asc){    _id,    name,    "slug": slug.current,    tags,    meat,    versions,    "categories": array::compact(categories[]->{ _id, title, slug }),    "descriptionPlain": "",    "mainImage": {      "id": coalesce(mainImage.asset._ref, ""),      "preview": mainImage.asset->metadata.lqip,      "hotspot": mainImage.hotspot{ x, y },      "crop": mainImage.crop{ top, bottom, left, right }    },    // Compute unique product lines from both DGF and LFD sauces    "sauceLines": array::unique((array::compact(dgfSauces[]->line) + array::compact(lfdSauces[]->line)))  }
export type GetRecipesBySauceIdsQueryResult = Array<never>;
// Variable: getAllRecipeCategoriesQuery
// Query: *[_type == "recipeCategory"] | order(title asc){ _id, title, slug }
export type GetAllRecipeCategoriesQueryResult = Array<{
  _id: string;
  title: string;
  slug: Slug;
}>;
// Variable: getRecipeByIdQuery
// Query: *[    _type == "recipe"    && _id == $id    && !(_id in path('drafts.**'))  ][0]{    _id,    _type,    name,    "slug": slug.current,    serves,    tags,    meat,    versions,    "categories": array::compact(categories[]->{ _id, title, slug }),    "mainImage": {      "id": coalesce(mainImage.asset._ref, ""),      "preview": mainImage.asset->metadata.lqip,      "hotspot": mainImage.hotspot{ x, y },      "crop": mainImage.crop{ top, bottom, left, right },      "alt": mainImage.alt    },    dgfIngredients,    dgfDirections,    dgfNotes,    lfdIngredients,    lfdDirections,    lfdNotes,    dgfSauces[]->{      _id,      name,      "slug": slug.current,      line,      "mainImage": mainImage{          "id": asset._ref,  "preview": asset->metadata.lqip,  hotspot {    x,    y  },  crop {    bottom,    left,    right,    top  },        "alt": coalesce(alt, "")      }    },    lfdSauces[]->{      _id,      name,      "slug": slug.current,      line,      "mainImage": mainImage{          "id": asset._ref,  "preview": asset->metadata.lqip,  hotspot {    x,    y  },  crop {    bottom,    left,    right,    top  },        "alt": coalesce(alt, "")      }    }  }
export type GetRecipeByIdQueryResult = {
  _id: string;
  _type: "recipe";
  name: string;
  slug: string;
  serves: string | null;
  tags: Array<string> | null;
  meat: Array<string> | null;
  versions: Array<string>;
  categories: Array<{
    _id: string;
    title: string;
    slug: Slug;
  }> | null;
  mainImage: {
    id: string | "";
    preview: string | null;
    hotspot: {
      x: number;
      y: number;
    } | null;
    crop: {
      top: number;
      bottom: number;
      left: number;
      right: number;
    } | null;
    alt: null;
  };
  dgfIngredients: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  dgfDirections: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  dgfNotes: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }> | null;
  lfdIngredients: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  lfdDirections: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  lfdNotes: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }> | null;
  dgfSauces: Array<{
    _id: string;
    name: string;
    slug: string;
    line: "Organic" | "Original" | "Ultra-Premium";
    mainImage: {
      id: string | null;
      preview: string | null;
      hotspot: {
        x: number;
        y: number;
      } | null;
      crop: {
        bottom: number;
        left: number;
        right: number;
        top: number;
      } | null;
      alt: string | "";
    } | null;
  }> | null;
  lfdSauces: Array<{
    _id: string;
    name: string;
    slug: string;
    line: "Organic" | "Original" | "Ultra-Premium";
    mainImage: {
      id: string | null;
      preview: string | null;
      hotspot: {
        x: number;
        y: number;
      } | null;
      crop: {
        bottom: number;
        left: number;
        right: number;
        top: number;
      } | null;
      alt: string | "";
    } | null;
  }> | null;
} | null;
// Variable: getRecipeBySlugQuery
// Query: *[    _type == "recipe"    && slug.current in [$slug, $prefixedSlug]    && !(_id in path('drafts.**'))  ][0]{    _id,    _type,    name,    "slug": slug.current,    serves,    tags,    meat,    versions,    "categories": array::compact(categories[]->{ _id, title, slug }),    "mainImage": {      "id": coalesce(mainImage.asset._ref, ""),      "preview": mainImage.asset->metadata.lqip,      "hotspot": mainImage.hotspot{ x, y },      "crop": mainImage.crop{ top, bottom, left, right },      "alt": mainImage.alt    },    dgfIngredients,    dgfDirections,    dgfNotes,    lfdIngredients,    lfdDirections,    lfdNotes,    dgfSauces[]->{      _id,      name,      "slug": slug.current,      line,      "mainImage": mainImage{          "id": asset._ref,  "preview": asset->metadata.lqip,  hotspot {    x,    y  },  crop {    bottom,    left,    right,    top  },        "alt": coalesce(alt, "")      }    },    lfdSauces[]->{      _id,      name,      "slug": slug.current,      line,      "mainImage": mainImage{          "id": asset._ref,  "preview": asset->metadata.lqip,  hotspot {    x,    y  },  crop {    bottom,    left,    right,    top  },        "alt": coalesce(alt, "")      }    }  }
export type GetRecipeBySlugQueryResult = {
  _id: string;
  _type: "recipe";
  name: string;
  slug: string;
  serves: string | null;
  tags: Array<string> | null;
  meat: Array<string> | null;
  versions: Array<string>;
  categories: Array<{
    _id: string;
    title: string;
    slug: Slug;
  }> | null;
  mainImage: {
    id: string | "";
    preview: string | null;
    hotspot: {
      x: number;
      y: number;
    } | null;
    crop: {
      top: number;
      bottom: number;
      left: number;
      right: number;
    } | null;
    alt: null;
  };
  dgfIngredients: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  dgfDirections: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  dgfNotes: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }> | null;
  lfdIngredients: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  lfdDirections: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  lfdNotes: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }> | null;
  dgfSauces: Array<{
    _id: string;
    name: string;
    slug: string;
    line: "Organic" | "Original" | "Ultra-Premium";
    mainImage: {
      id: string | null;
      preview: string | null;
      hotspot: {
        x: number;
        y: number;
      } | null;
      crop: {
        bottom: number;
        left: number;
        right: number;
        top: number;
      } | null;
      alt: string | "";
    } | null;
  }> | null;
  lfdSauces: Array<{
    _id: string;
    name: string;
    slug: string;
    line: "Organic" | "Original" | "Ultra-Premium";
    mainImage: {
      id: string | null;
      preview: string | null;
      hotspot: {
        x: number;
        y: number;
      } | null;
      crop: {
        bottom: number;
        left: number;
        right: number;
        top: number;
      } | null;
      alt: string | "";
    } | null;
  }> | null;
} | null;
// Variable: getProductIndexPageQuery
// Query: *[_type == "productIndex"][0]{    _id,    _type,    title,    description,    "slug": slug.current  }
export type GetProductIndexPageQueryResult = {
  _id: string;
  _type: "productIndex";
  title: string | null;
  description: string | null;
  slug: string;
} | null;
// Variable: getAllProductsForIndexQuery
// Query: *[_type == "product" && defined(slug.current) && !(_id in path('drafts.**'))] | order(name asc){    _id,    name,    "slug": slug.current,    category,    price,    "descriptionPlain": coalesce(pt::text(description), ""),    "mainImage": {      "id": coalesce(mainImage.asset._ref, ""),      "preview": mainImage.asset->metadata.lqip,      "hotspot": mainImage.hotspot{ x, y },      "crop": mainImage.crop{ top, bottom, left, right },      "alt": mainImage.alt    },    // Unique sets of referenced sauce attributes for filtering/badges    "sauceLines": array::unique((sauces[]->line)[defined(@)]),    "sauceTypes": array::unique((sauces[]->category)[defined(@)])  }
export type GetAllProductsForIndexQueryResult = Array<{
  _id: string;
  name: string;
  slug: string;
  category: "case_of_12" | "gift_pack" | "merchandise";
  price: number | null;
  descriptionPlain: string;
  mainImage: {
    id: string | "";
    preview: string | null;
    hotspot: {
      x: number;
      y: number;
    } | null;
    crop: {
      top: number;
      bottom: number;
      left: number;
      right: number;
    } | null;
    alt: null;
  };
  sauceLines: Array<"Organic" | "Original" | "Ultra-Premium"> | null;
  sauceTypes: Array<
    "Pasta Sauce" | "Pizza Sauce" | "Salsa Sauce" | "Sandwich Sauce"
  > | null;
}>;
// Variable: getProductsBySauceIdQuery
// Query: *[    _type == "product"    && defined(slug.current)    && !(_id in path('drafts.**'))    && $sauceId != null    && references($sauceId)  ] | order(name asc){    _id,    name,    "slug": slug.current,    category,    price,    "descriptionPlain": coalesce(pt::text(description), ""),    "mainImage": {      "id": coalesce(mainImage.asset._ref, ""),      "preview": mainImage.asset->metadata.lqip,      "hotspot": mainImage.hotspot{ x, y },      "crop": mainImage.crop{ top, bottom, left, right },      "alt": mainImage.alt    },    "sauceLines": array::unique((sauces[]->line)[defined(@)]),    "sauceTypes": array::unique((sauces[]->category)[defined(@)])  }
export type GetProductsBySauceIdQueryResult = Array<{
  _id: string;
  name: string;
  slug: string;
  category: "case_of_12" | "gift_pack" | "merchandise";
  price: number | null;
  descriptionPlain: string;
  mainImage: {
    id: string | "";
    preview: string | null;
    hotspot: {
      x: number;
      y: number;
    } | null;
    crop: {
      top: number;
      bottom: number;
      left: number;
      right: number;
    } | null;
    alt: null;
  };
  sauceLines: Array<"Organic" | "Original" | "Ultra-Premium"> | null;
  sauceTypes: Array<
    "Pasta Sauce" | "Pizza Sauce" | "Salsa Sauce" | "Sandwich Sauce"
  > | null;
}>;
// Variable: getProductBySlugQuery
// Query: *[_type == "product" && slug.current in [$slug, $prefixedSlug]][0]{    _id,    _type,    name,    "slug": slug.current,    sku,    category,    shippingCategory,    price,    weight,    "description": description[]{      ...,      _type == "block" => {        ...,          markDefs[]{    ...,      ...customLink{    openInNewTab,    "href": select(      type == "internal" => internal->slug.current,      type == "external" => external,      "#"    ),  }  }      },      _type == "image" => {          "id": asset._ref,  "preview": asset->metadata.lqip,  hotspot {    x,    y  },  crop {    bottom,    left,    right,    top  },        "caption": caption      }    },    "descriptionPlain": coalesce(pt::text(description), ""),    "mainImage": mainImage{        "id": asset._ref,  "preview": asset->metadata.lqip,  hotspot {    x,    y  },  crop {    bottom,    left,    right,    top  },      "alt": coalesce(alt, "")    },    "sauces": array::compact(sauces[]->{      _id,      _type,      name,      line,      category,      "slug": slug.current,      "descriptionPlain": coalesce(pt::text(description), ""),      "mainImage": mainImage{          "id": asset._ref,  "preview": asset->metadata.lqip,  hotspot {    x,    y  },  crop {    bottom,    left,    right,    top  },        "alt": coalesce(alt, "")      }    })  }
export type GetProductBySlugQueryResult = {
  _id: string;
  _type: "product";
  name: string;
  slug: string;
  sku: string;
  category: "case_of_12" | "gift_pack" | "merchandise";
  shippingCategory: "gift_pack" | "large_crate" | "normal_item";
  price: number | null;
  weight: number;
  description: Array<
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "h2" | "h3" | "h4" | "h5" | "h6" | "inline" | "normal";
        listItem?: "bullet" | "number";
        markDefs: Array<
          | {
              customLink?: CustomUrl;
              _type: "customLink";
              _key: string;
              openInNewTab: boolean | null;
              href: string | "#" | null;
            }
          | {
              customLink?: CustomUrl;
              _type: "customLink";
              _key: string;
            }
        > | null;
        level?: number;
        _type: "block";
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot: {
          x: number;
          y: number;
        } | null;
        crop: {
          bottom: number;
          left: number;
          right: number;
          top: number;
        } | null;
        caption: string | null;
        _type: "image";
        _key: string;
        id: string | null;
        preview: string | null;
      }
  > | null;
  descriptionPlain: string;
  mainImage: {
    id: string | null;
    preview: string | null;
    hotspot: {
      x: number;
      y: number;
    } | null;
    crop: {
      bottom: number;
      left: number;
      right: number;
      top: number;
    } | null;
    alt: "";
  };
  sauces: Array<{
    _id: string;
    _type: "sauce";
    name: string;
    line: "Organic" | "Original" | "Ultra-Premium";
    category: "Pasta Sauce" | "Pizza Sauce" | "Salsa Sauce" | "Sandwich Sauce";
    slug: string;
    descriptionPlain: string;
    mainImage: {
      id: string | null;
      preview: string | null;
      hotspot: {
        x: number;
        y: number;
      } | null;
      crop: {
        bottom: number;
        left: number;
        right: number;
        top: number;
      } | null;
      alt: string | "";
    } | null;
  }> | null;
} | null;
// Variable: getHistoryPageQuery
// Query: *[_type == "historyPage"][0]{    _id,    _type,    title,    description,    timeline{      markers[]{        heading,        subtitle,        content[]{          ...,          _type == "block" => {            ...,              markDefs[]{    ...,      ...customLink{    openInNewTab,    "href": select(      type == "internal" => internal->slug.current,      type == "external" => external,      "#"    ),  }  }          },          _type == "image" => {              image {      "id": asset._ref,  "preview": asset->metadata.lqip,  hotspot {    x,    y  },  crop {    bottom,    left,    right,    top  }  }          }        },        image{            "id": asset._ref,  "preview": asset->metadata.lqip,  hotspot {    x,    y  },  crop {    bottom,    left,    right,    top  },          "assetRef": asset._ref        }      }    },      pageBuilder[]{    ...,      "spacing": {    "spacingTop": coalesce(spacing.spacingTop, "default"),    "spacingBottom": coalesce(spacing.spacingBottom, "default")  },    _type,      _type == "cta" => {    ...,      richText[]{    ...,    _type == "block" => {      ...,        markDefs[]{    ...,      ...customLink{    openInNewTab,    "href": select(      type == "internal" => internal->slug.current,      type == "external" => external,      "#"    ),  }  }    },    _type == "image" => {        "id": asset._ref,  "preview": asset->metadata.lqip,  hotspot {    x,    y  },  crop {    bottom,    left,    right,    top  },      "caption": caption    }  },      buttons[]{    text,    variant,    _key,    _type,    "openInNewTab": url.openInNewTab,    "href": select(      url.type == "internal" => url.internal->slug.current,      url.type == "external" => url.external,      url.href    ),  },  },      _type == "feature" => {    ...,      image {      "id": asset._ref,  "preview": asset->metadata.lqip,  hotspot {    x,    y  },  crop {    bottom,    left,    right,    top  }  },      buttons[]{    text,    variant,    _key,    _type,    "openInNewTab": url.openInNewTab,    "href": select(      url.type == "internal" => url.internal->slug.current,      url.type == "external" => url.external,      url.href    ),  },      richText[]{    ...,    _type == "block" => {      ...,        markDefs[]{    ...,      ...customLink{    openInNewTab,    "href": select(      type == "internal" => internal->slug.current,      type == "external" => external,      "#"    ),  }  }    },    _type == "image" => {        "id": asset._ref,  "preview": asset->metadata.lqip,  hotspot {    x,    y  },  crop {    bottom,    left,    right,    top  },      "caption": caption    }  }  },      _type == "faqAccordion" => {    ...,      "faqs": array::compact(faqs[]->{    title,    _id,    _type,      richText[]{    ...,    _type == "block" => {      ...,        markDefs[]{    ...,      ...customLink{    openInNewTab,    "href": select(      type == "internal" => internal->slug.current,      type == "external" => external,      "#"    ),  }  }    },    _type == "image" => {        "id": asset._ref,  "preview": asset->metadata.lqip,  hotspot {    x,    y  },  crop {    bottom,    left,    right,    top  },      "caption": caption    }  }  }),    link{      ...,      "openInNewTab": url.openInNewTab,      "href": select(        url.type == "internal" => url.internal->slug.current,        url.type == "external" => url.external,        url.href      )    }  },      _type == "featureCardsIcon" => {    ...,      richText[]{    ...,    _type == "block" => {      ...,        markDefs[]{    ...,      ...customLink{    openInNewTab,    "href": select(      type == "internal" => internal->slug.current,      type == "external" => external,      "#"    ),  }  }    },    _type == "image" => {        "id": asset._ref,  "preview": asset->metadata.lqip,  hotspot {    x,    y  },  crop {    bottom,    left,    right,    top  },      "caption": caption    }  },    "cards": array::compact(cards[]{      ...,        richText[]{    ...,    _type == "block" => {      ...,        markDefs[]{    ...,      ...customLink{    openInNewTab,    "href": select(      type == "internal" => internal->slug.current,      type == "external" => external,      "#"    ),  }  }    },    _type == "image" => {        "id": asset._ref,  "preview": asset->metadata.lqip,  hotspot {    x,    y  },  crop {    bottom,    left,    right,    top  },      "caption": caption    }  },    })  },      _type == "subscribeNewsletter" => {    ...,    "subTitle": subTitle[]{      ...,        markDefs[]{    ...,      ...customLink{    openInNewTab,    "href": select(      type == "internal" => internal->slug.current,      type == "external" => external,      "#"    ),  }  }    },    "helperText": helperText[]{      ...,        markDefs[]{    ...,      ...customLink{    openInNewTab,    "href": select(      type == "internal" => internal->slug.current,      type == "external" => external,      "#"    ),  }  }    }  },      _type == "imageLinkCards" => {    ...,      richText[]{    ...,    _type == "block" => {      ...,        markDefs[]{    ...,      ...customLink{    openInNewTab,    "href": select(      type == "internal" => internal->slug.current,      type == "external" => external,      "#"    ),  }  }    },    _type == "image" => {        "id": asset._ref,  "preview": asset->metadata.lqip,  hotspot {    x,    y  },  crop {    bottom,    left,    right,    top  },      "caption": caption    }  },      buttons[]{    text,    variant,    _key,    _type,    "openInNewTab": url.openInNewTab,    "href": select(      url.type == "internal" => url.internal->slug.current,      url.type == "external" => url.external,      url.href    ),  },    "cards": array::compact(cards[]{      ...,      "openInNewTab": url.openInNewTab,      "href": select(        url.type == "internal" => url.internal->slug.current,        url.type == "external" => url.external,        url.href      ),        image {      "id": asset._ref,  "preview": asset->metadata.lqip,  hotspot {    x,    y  },  crop {    bottom,    left,    right,    top  }  },    })  }  }  }
export type GetHistoryPageQueryResult = {
  _id: string;
  _type: "historyPage";
  title: string;
  description: string | null;
  timeline: {
    markers: Array<{
      heading: string | null;
      subtitle: string | null;
      content: Array<
        | {
            children?: Array<{
              marks?: Array<string>;
              text?: string;
              _type: "span";
              _key: string;
            }>;
            style?: "h2" | "h3" | "h4" | "h5" | "h6" | "inline" | "normal";
            listItem?: "bullet" | "number";
            markDefs: Array<
              | {
                  customLink?: CustomUrl;
                  _type: "customLink";
                  _key: string;
                  openInNewTab: boolean | null;
                  href: string | "#" | null;
                }
              | {
                  customLink?: CustomUrl;
                  _type: "customLink";
                  _key: string;
                }
            > | null;
            level?: number;
            _type: "block";
            _key: string;
          }
        | {
            asset?: {
              _ref: string;
              _type: "reference";
              _weak?: boolean;
              [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
            };
            media?: unknown;
            hotspot?: SanityImageHotspot;
            crop?: SanityImageCrop;
            caption?: string;
            _type: "image";
            _key: string;
            image: null;
          }
      > | null;
      image: {
        id: string | null;
        preview: string | null;
        hotspot: {
          x: number;
          y: number;
        } | null;
        crop: {
          bottom: number;
          left: number;
          right: number;
          top: number;
        } | null;
        assetRef: string | null;
      } | null;
    }> | null;
  } | null;
  pageBuilder: Array<
    | {
        _key: string;
        _type: "cta";
        eyebrow?: string;
        title?: string;
        richText: Array<
          | {
              children?: Array<{
                marks?: Array<string>;
                text?: string;
                _type: "span";
                _key: string;
              }>;
              style?: "h2" | "h3" | "h4" | "h5" | "h6" | "inline" | "normal";
              listItem?: "bullet" | "number";
              markDefs: Array<
                | {
                    customLink?: CustomUrl;
                    _type: "customLink";
                    _key: string;
                    openInNewTab: boolean | null;
                    href: string | "#" | null;
                  }
                | {
                    customLink?: CustomUrl;
                    _type: "customLink";
                    _key: string;
                  }
              > | null;
              level?: number;
              _type: "block";
              _key: string;
            }
          | {
              asset?: {
                _ref: string;
                _type: "reference";
                _weak?: boolean;
                [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
              };
              media?: unknown;
              hotspot: {
                x: number;
                y: number;
              } | null;
              crop: {
                bottom: number;
                left: number;
                right: number;
                top: number;
              } | null;
              caption: string | null;
              _type: "image";
              _key: string;
              id: string | null;
              preview: string | null;
            }
        > | null;
        buttons: Array<{
          text: string | null;
          variant: "default" | "link" | "outline" | "secondary" | null;
          _key: string;
          _type: "button";
          openInNewTab: boolean | null;
          href: string | null;
        }> | null;
        spacing: SectionSpacing;
      }
    | {
        _key: string;
        _type: "faqAccordion";
        eyebrow?: string;
        title: string;
        subtitle?: string;
        link: {
          title?: string;
          description?: string;
          url?: CustomUrl;
          openInNewTab: boolean | null;
          href: string | null;
        } | null;
        faqs: Array<{
          title: string;
          _id: string;
          _type: "faq";
          richText: Array<
            | {
                children?: Array<{
                  marks?: Array<string>;
                  text?: string;
                  _type: "span";
                  _key: string;
                }>;
                style?: "h2" | "h3" | "h4" | "h5" | "h6" | "inline" | "normal";
                listItem?: "bullet" | "number";
                markDefs: Array<
                  | {
                      customLink?: CustomUrl;
                      _type: "customLink";
                      _key: string;
                      openInNewTab: boolean | null;
                      href: string | "#" | null;
                    }
                  | {
                      customLink?: CustomUrl;
                      _type: "customLink";
                      _key: string;
                    }
                > | null;
                level?: number;
                _type: "block";
                _key: string;
              }
            | {
                asset?: {
                  _ref: string;
                  _type: "reference";
                  _weak?: boolean;
                  [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
                };
                media?: unknown;
                hotspot: {
                  x: number;
                  y: number;
                } | null;
                crop: {
                  bottom: number;
                  left: number;
                  right: number;
                  top: number;
                } | null;
                caption: string | null;
                _type: "image";
                _key: string;
                id: string | null;
                preview: string | null;
              }
          > | null;
        }>;
        spacing: SectionSpacing;
      }
    | {
        _key: string;
        _type: "feature";
        badge?: string;
        title?: string;
        richText: Array<
          | {
              children?: Array<{
                marks?: Array<string>;
                text?: string;
                _type: "span";
                _key: string;
              }>;
              style?: "h2" | "h3" | "h4" | "h5" | "h6" | "inline" | "normal";
              listItem?: "bullet" | "number";
              markDefs: Array<
                | {
                    customLink?: CustomUrl;
                    _type: "customLink";
                    _key: string;
                    openInNewTab: boolean | null;
                    href: string | "#" | null;
                  }
                | {
                    customLink?: CustomUrl;
                    _type: "customLink";
                    _key: string;
                  }
              > | null;
              level?: number;
              _type: "block";
              _key: string;
            }
          | {
              asset?: {
                _ref: string;
                _type: "reference";
                _weak?: boolean;
                [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
              };
              media?: unknown;
              hotspot: {
                x: number;
                y: number;
              } | null;
              crop: {
                bottom: number;
                left: number;
                right: number;
                top: number;
              } | null;
              caption: string | null;
              _type: "image";
              _key: string;
              id: string | null;
              preview: string | null;
            }
        > | null;
        image: {
          id: string | null;
          preview: string | null;
          hotspot: {
            x: number;
            y: number;
          } | null;
          crop: {
            bottom: number;
            left: number;
            right: number;
            top: number;
          } | null;
        } | null;
        buttons: Array<{
          text: string | null;
          variant: "default" | "link" | "outline" | "secondary" | null;
          _key: string;
          _type: "button";
          openInNewTab: boolean | null;
          href: string | null;
        }> | null;
        spacing: SectionSpacing;
      }
    | {
        _key: string;
        _type: "featureCardsIcon";
        eyebrow?: string;
        title?: string;
        richText: Array<{
          children?: Array<{
            marks?: Array<string>;
            text?: string;
            _type: "span";
            _key: string;
          }>;
          style?: "h2" | "h3" | "h4" | "h5" | "h6" | "inline" | "normal";
          listItem?: "bullet" | "number";
          markDefs: Array<
            | {
                customLink?: CustomUrl;
                _type: "customLink";
                _key: string;
                openInNewTab: boolean | null;
                href: string | "#" | null;
              }
            | {
                customLink?: CustomUrl;
                _type: "customLink";
                _key: string;
              }
          > | null;
          level?: number;
          _type: "block";
          _key: string;
        }> | null;
        cards: Array<{
          icon?: IconPicker;
          title?: string;
          richText: Array<{
            children?: Array<{
              marks?: Array<string>;
              text?: string;
              _type: "span";
              _key: string;
            }>;
            style?: "h2" | "h3" | "h4" | "h5" | "h6" | "inline" | "normal";
            listItem?: "bullet" | "number";
            markDefs: Array<
              | {
                  customLink?: CustomUrl;
                  _type: "customLink";
                  _key: string;
                  openInNewTab: boolean | null;
                  href: string | "#" | null;
                }
              | {
                  customLink?: CustomUrl;
                  _type: "customLink";
                  _key: string;
                }
            > | null;
            level?: number;
            _type: "block";
            _key: string;
          }> | null;
          _type: "featureCardIcon";
          _key: string;
        }> | null;
        spacing: SectionSpacing;
      }
    | {
        _key: string;
        _type: "imageLinkCards";
        eyebrow?: string;
        title: string;
        richText: Array<
          | {
              children?: Array<{
                marks?: Array<string>;
                text?: string;
                _type: "span";
                _key: string;
              }>;
              style?: "h2" | "h3" | "h4" | "h5" | "h6" | "inline" | "normal";
              listItem?: "bullet" | "number";
              markDefs: Array<
                | {
                    customLink?: CustomUrl;
                    _type: "customLink";
                    _key: string;
                    openInNewTab: boolean | null;
                    href: string | "#" | null;
                  }
                | {
                    customLink?: CustomUrl;
                    _type: "customLink";
                    _key: string;
                  }
              > | null;
              level?: number;
              _type: "block";
              _key: string;
            }
          | {
              asset?: {
                _ref: string;
                _type: "reference";
                _weak?: boolean;
                [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
              };
              media?: unknown;
              hotspot: {
                x: number;
                y: number;
              } | null;
              crop: {
                bottom: number;
                left: number;
                right: number;
                top: number;
              } | null;
              caption: string | null;
              _type: "image";
              _key: string;
              id: string | null;
              preview: string | null;
            }
        > | null;
        buttons: Array<{
          text: string | null;
          variant: "default" | "link" | "outline" | "secondary" | null;
          _key: string;
          _type: "button";
          openInNewTab: boolean | null;
          href: string | null;
        }> | null;
        cards: Array<{
          title: string;
          description: string;
          image: {
            id: string | null;
            preview: string | null;
            hotspot: {
              x: number;
              y: number;
            } | null;
            crop: {
              bottom: number;
              left: number;
              right: number;
              top: number;
            } | null;
          } | null;
          url?: CustomUrl;
          _type: "imageLinkCard";
          _key: string;
          openInNewTab: boolean | null;
          href: string | null;
        }> | null;
        spacing: SectionSpacing;
      }
    | {
        _key: string;
        _type: "subscribeNewsletter";
        title?: string;
        subTitle: Array<{
          children?: Array<{
            marks?: Array<string>;
            text?: string;
            _type: "span";
            _key: string;
          }>;
          style?: "h2" | "h3" | "h4" | "h5" | "h6" | "inline" | "normal";
          listItem?: "bullet" | "number";
          markDefs: Array<
            | {
                customLink?: CustomUrl;
                _type: "customLink";
                _key: string;
                openInNewTab: boolean | null;
                href: string | "#" | null;
              }
            | {
                customLink?: CustomUrl;
                _type: "customLink";
                _key: string;
              }
          > | null;
          level?: number;
          _type: "block";
          _key: string;
        }> | null;
        helperText: Array<{
          children?: Array<{
            marks?: Array<string>;
            text?: string;
            _type: "span";
            _key: string;
          }>;
          style?: "h2" | "h3" | "h4" | "h5" | "h6" | "inline" | "normal";
          listItem?: "bullet" | "number";
          markDefs: Array<
            | {
                customLink?: CustomUrl;
                _type: "customLink";
                _key: string;
                openInNewTab: boolean | null;
                href: string | "#" | null;
              }
            | {
                customLink?: CustomUrl;
                _type: "customLink";
                _key: string;
              }
          > | null;
          level?: number;
          _type: "block";
          _key: string;
        }> | null;
        spacing: SectionSpacing;
      }
  > | null;
} | null;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    '\n  *[_type == "page" && defined(image)][0]{\n    \n  image {\n    \n  "id": asset._ref,\n  "preview": asset->metadata.lqip,\n  hotspot {\n    x,\n    y\n  },\n  crop {\n    bottom,\n    left,\n    right,\n    top\n  }\n\n  }\n\n  }.image\n': QueryImageTypeResult;
    '*[_type == "homePage" && _id == "homePage"][0]{\n    ...,\n    _id,\n    _type,\n    "slug": slug.current,\n    title,\n    description,\n    \n  pageBuilder[]{\n    ...,\n    \n  "spacing": {\n    "spacingTop": coalesce(spacing.spacingTop, "default"),\n    "spacingBottom": coalesce(spacing.spacingBottom, "default")\n  }\n,\n    _type,\n    \n  _type == "cta" => {\n    ...,\n    \n  richText[]{\n    ...,\n    _type == "block" => {\n      ...,\n      \n  markDefs[]{\n    ...,\n    \n  ...customLink{\n    openInNewTab,\n    "href": select(\n      type == "internal" => internal->slug.current,\n      type == "external" => external,\n      "#"\n    ),\n  }\n\n  }\n\n    },\n    _type == "image" => {\n      \n  "id": asset._ref,\n  "preview": asset->metadata.lqip,\n  hotspot {\n    x,\n    y\n  },\n  crop {\n    bottom,\n    left,\n    right,\n    top\n  }\n,\n      "caption": caption\n    }\n  }\n,\n    \n  buttons[]{\n    text,\n    variant,\n    _key,\n    _type,\n    "openInNewTab": url.openInNewTab,\n    "href": select(\n      url.type == "internal" => url.internal->slug.current,\n      url.type == "external" => url.external,\n      url.href\n    ),\n  }\n,\n  }\n,\n    \n  _type == "feature" => {\n    ...,\n    \n  image {\n    \n  "id": asset._ref,\n  "preview": asset->metadata.lqip,\n  hotspot {\n    x,\n    y\n  },\n  crop {\n    bottom,\n    left,\n    right,\n    top\n  }\n\n  }\n,\n    \n  buttons[]{\n    text,\n    variant,\n    _key,\n    _type,\n    "openInNewTab": url.openInNewTab,\n    "href": select(\n      url.type == "internal" => url.internal->slug.current,\n      url.type == "external" => url.external,\n      url.href\n    ),\n  }\n,\n    \n  richText[]{\n    ...,\n    _type == "block" => {\n      ...,\n      \n  markDefs[]{\n    ...,\n    \n  ...customLink{\n    openInNewTab,\n    "href": select(\n      type == "internal" => internal->slug.current,\n      type == "external" => external,\n      "#"\n    ),\n  }\n\n  }\n\n    },\n    _type == "image" => {\n      \n  "id": asset._ref,\n  "preview": asset->metadata.lqip,\n  hotspot {\n    x,\n    y\n  },\n  crop {\n    bottom,\n    left,\n    right,\n    top\n  }\n,\n      "caption": caption\n    }\n  }\n\n  }\n,\n    \n  _type == "faqAccordion" => {\n    ...,\n    \n  "faqs": array::compact(faqs[]->{\n    title,\n    _id,\n    _type,\n    \n  richText[]{\n    ...,\n    _type == "block" => {\n      ...,\n      \n  markDefs[]{\n    ...,\n    \n  ...customLink{\n    openInNewTab,\n    "href": select(\n      type == "internal" => internal->slug.current,\n      type == "external" => external,\n      "#"\n    ),\n  }\n\n  }\n\n    },\n    _type == "image" => {\n      \n  "id": asset._ref,\n  "preview": asset->metadata.lqip,\n  hotspot {\n    x,\n    y\n  },\n  crop {\n    bottom,\n    left,\n    right,\n    top\n  }\n,\n      "caption": caption\n    }\n  }\n\n  })\n,\n    link{\n      ...,\n      "openInNewTab": url.openInNewTab,\n      "href": select(\n        url.type == "internal" => url.internal->slug.current,\n        url.type == "external" => url.external,\n        url.href\n      )\n    }\n  }\n,\n    \n  _type == "featureCardsIcon" => {\n    ...,\n    \n  richText[]{\n    ...,\n    _type == "block" => {\n      ...,\n      \n  markDefs[]{\n    ...,\n    \n  ...customLink{\n    openInNewTab,\n    "href": select(\n      type == "internal" => internal->slug.current,\n      type == "external" => external,\n      "#"\n    ),\n  }\n\n  }\n\n    },\n    _type == "image" => {\n      \n  "id": asset._ref,\n  "preview": asset->metadata.lqip,\n  hotspot {\n    x,\n    y\n  },\n  crop {\n    bottom,\n    left,\n    right,\n    top\n  }\n,\n      "caption": caption\n    }\n  }\n,\n    "cards": array::compact(cards[]{\n      ...,\n      \n  richText[]{\n    ...,\n    _type == "block" => {\n      ...,\n      \n  markDefs[]{\n    ...,\n    \n  ...customLink{\n    openInNewTab,\n    "href": select(\n      type == "internal" => internal->slug.current,\n      type == "external" => external,\n      "#"\n    ),\n  }\n\n  }\n\n    },\n    _type == "image" => {\n      \n  "id": asset._ref,\n  "preview": asset->metadata.lqip,\n  hotspot {\n    x,\n    y\n  },\n  crop {\n    bottom,\n    left,\n    right,\n    top\n  }\n,\n      "caption": caption\n    }\n  }\n,\n    })\n  }\n,\n    \n  _type == "subscribeNewsletter" => {\n    ...,\n    "subTitle": subTitle[]{\n      ...,\n      \n  markDefs[]{\n    ...,\n    \n  ...customLink{\n    openInNewTab,\n    "href": select(\n      type == "internal" => internal->slug.current,\n      type == "external" => external,\n      "#"\n    ),\n  }\n\n  }\n\n    },\n    "helperText": helperText[]{\n      ...,\n      \n  markDefs[]{\n    ...,\n    \n  ...customLink{\n    openInNewTab,\n    "href": select(\n      type == "internal" => internal->slug.current,\n      type == "external" => external,\n      "#"\n    ),\n  }\n\n  }\n\n    }\n  }\n,\n    \n  _type == "imageLinkCards" => {\n    ...,\n    \n  richText[]{\n    ...,\n    _type == "block" => {\n      ...,\n      \n  markDefs[]{\n    ...,\n    \n  ...customLink{\n    openInNewTab,\n    "href": select(\n      type == "internal" => internal->slug.current,\n      type == "external" => external,\n      "#"\n    ),\n  }\n\n  }\n\n    },\n    _type == "image" => {\n      \n  "id": asset._ref,\n  "preview": asset->metadata.lqip,\n  hotspot {\n    x,\n    y\n  },\n  crop {\n    bottom,\n    left,\n    right,\n    top\n  }\n,\n      "caption": caption\n    }\n  }\n,\n    \n  buttons[]{\n    text,\n    variant,\n    _key,\n    _type,\n    "openInNewTab": url.openInNewTab,\n    "href": select(\n      url.type == "internal" => url.internal->slug.current,\n      url.type == "external" => url.external,\n      url.href\n    ),\n  }\n,\n    "cards": array::compact(cards[]{\n      ...,\n      "openInNewTab": url.openInNewTab,\n      "href": select(\n        url.type == "internal" => url.internal->slug.current,\n        url.type == "external" => url.external,\n        url.href\n      ),\n      \n  image {\n    \n  "id": asset._ref,\n  "preview": asset->metadata.lqip,\n  hotspot {\n    x,\n    y\n  },\n  crop {\n    bottom,\n    left,\n    right,\n    top\n  }\n\n  }\n,\n    })\n  }\n\n  }\n\n  }': QueryHomePageDataResult;
    '\n  *[_type == "page" && slug.current == $slug][0]{\n    ...,\n    "slug": slug.current,\n    \n  pageBuilder[]{\n    ...,\n    \n  "spacing": {\n    "spacingTop": coalesce(spacing.spacingTop, "default"),\n    "spacingBottom": coalesce(spacing.spacingBottom, "default")\n  }\n,\n    _type,\n    \n  _type == "cta" => {\n    ...,\n    \n  richText[]{\n    ...,\n    _type == "block" => {\n      ...,\n      \n  markDefs[]{\n    ...,\n    \n  ...customLink{\n    openInNewTab,\n    "href": select(\n      type == "internal" => internal->slug.current,\n      type == "external" => external,\n      "#"\n    ),\n  }\n\n  }\n\n    },\n    _type == "image" => {\n      \n  "id": asset._ref,\n  "preview": asset->metadata.lqip,\n  hotspot {\n    x,\n    y\n  },\n  crop {\n    bottom,\n    left,\n    right,\n    top\n  }\n,\n      "caption": caption\n    }\n  }\n,\n    \n  buttons[]{\n    text,\n    variant,\n    _key,\n    _type,\n    "openInNewTab": url.openInNewTab,\n    "href": select(\n      url.type == "internal" => url.internal->slug.current,\n      url.type == "external" => url.external,\n      url.href\n    ),\n  }\n,\n  }\n,\n    \n  _type == "feature" => {\n    ...,\n    \n  image {\n    \n  "id": asset._ref,\n  "preview": asset->metadata.lqip,\n  hotspot {\n    x,\n    y\n  },\n  crop {\n    bottom,\n    left,\n    right,\n    top\n  }\n\n  }\n,\n    \n  buttons[]{\n    text,\n    variant,\n    _key,\n    _type,\n    "openInNewTab": url.openInNewTab,\n    "href": select(\n      url.type == "internal" => url.internal->slug.current,\n      url.type == "external" => url.external,\n      url.href\n    ),\n  }\n,\n    \n  richText[]{\n    ...,\n    _type == "block" => {\n      ...,\n      \n  markDefs[]{\n    ...,\n    \n  ...customLink{\n    openInNewTab,\n    "href": select(\n      type == "internal" => internal->slug.current,\n      type == "external" => external,\n      "#"\n    ),\n  }\n\n  }\n\n    },\n    _type == "image" => {\n      \n  "id": asset._ref,\n  "preview": asset->metadata.lqip,\n  hotspot {\n    x,\n    y\n  },\n  crop {\n    bottom,\n    left,\n    right,\n    top\n  }\n,\n      "caption": caption\n    }\n  }\n\n  }\n,\n    \n  _type == "faqAccordion" => {\n    ...,\n    \n  "faqs": array::compact(faqs[]->{\n    title,\n    _id,\n    _type,\n    \n  richText[]{\n    ...,\n    _type == "block" => {\n      ...,\n      \n  markDefs[]{\n    ...,\n    \n  ...customLink{\n    openInNewTab,\n    "href": select(\n      type == "internal" => internal->slug.current,\n      type == "external" => external,\n      "#"\n    ),\n  }\n\n  }\n\n    },\n    _type == "image" => {\n      \n  "id": asset._ref,\n  "preview": asset->metadata.lqip,\n  hotspot {\n    x,\n    y\n  },\n  crop {\n    bottom,\n    left,\n    right,\n    top\n  }\n,\n      "caption": caption\n    }\n  }\n\n  })\n,\n    link{\n      ...,\n      "openInNewTab": url.openInNewTab,\n      "href": select(\n        url.type == "internal" => url.internal->slug.current,\n        url.type == "external" => url.external,\n        url.href\n      )\n    }\n  }\n,\n    \n  _type == "featureCardsIcon" => {\n    ...,\n    \n  richText[]{\n    ...,\n    _type == "block" => {\n      ...,\n      \n  markDefs[]{\n    ...,\n    \n  ...customLink{\n    openInNewTab,\n    "href": select(\n      type == "internal" => internal->slug.current,\n      type == "external" => external,\n      "#"\n    ),\n  }\n\n  }\n\n    },\n    _type == "image" => {\n      \n  "id": asset._ref,\n  "preview": asset->metadata.lqip,\n  hotspot {\n    x,\n    y\n  },\n  crop {\n    bottom,\n    left,\n    right,\n    top\n  }\n,\n      "caption": caption\n    }\n  }\n,\n    "cards": array::compact(cards[]{\n      ...,\n      \n  richText[]{\n    ...,\n    _type == "block" => {\n      ...,\n      \n  markDefs[]{\n    ...,\n    \n  ...customLink{\n    openInNewTab,\n    "href": select(\n      type == "internal" => internal->slug.current,\n      type == "external" => external,\n      "#"\n    ),\n  }\n\n  }\n\n    },\n    _type == "image" => {\n      \n  "id": asset._ref,\n  "preview": asset->metadata.lqip,\n  hotspot {\n    x,\n    y\n  },\n  crop {\n    bottom,\n    left,\n    right,\n    top\n  }\n,\n      "caption": caption\n    }\n  }\n,\n    })\n  }\n,\n    \n  _type == "subscribeNewsletter" => {\n    ...,\n    "subTitle": subTitle[]{\n      ...,\n      \n  markDefs[]{\n    ...,\n    \n  ...customLink{\n    openInNewTab,\n    "href": select(\n      type == "internal" => internal->slug.current,\n      type == "external" => external,\n      "#"\n    ),\n  }\n\n  }\n\n    },\n    "helperText": helperText[]{\n      ...,\n      \n  markDefs[]{\n    ...,\n    \n  ...customLink{\n    openInNewTab,\n    "href": select(\n      type == "internal" => internal->slug.current,\n      type == "external" => external,\n      "#"\n    ),\n  }\n\n  }\n\n    }\n  }\n,\n    \n  _type == "imageLinkCards" => {\n    ...,\n    \n  richText[]{\n    ...,\n    _type == "block" => {\n      ...,\n      \n  markDefs[]{\n    ...,\n    \n  ...customLink{\n    openInNewTab,\n    "href": select(\n      type == "internal" => internal->slug.current,\n      type == "external" => external,\n      "#"\n    ),\n  }\n\n  }\n\n    },\n    _type == "image" => {\n      \n  "id": asset._ref,\n  "preview": asset->metadata.lqip,\n  hotspot {\n    x,\n    y\n  },\n  crop {\n    bottom,\n    left,\n    right,\n    top\n  }\n,\n      "caption": caption\n    }\n  }\n,\n    \n  buttons[]{\n    text,\n    variant,\n    _key,\n    _type,\n    "openInNewTab": url.openInNewTab,\n    "href": select(\n      url.type == "internal" => url.internal->slug.current,\n      url.type == "external" => url.external,\n      url.href\n    ),\n  }\n,\n    "cards": array::compact(cards[]{\n      ...,\n      "openInNewTab": url.openInNewTab,\n      "href": select(\n        url.type == "internal" => url.internal->slug.current,\n        url.type == "external" => url.external,\n        url.href\n      ),\n      \n  image {\n    \n  "id": asset._ref,\n  "preview": asset->metadata.lqip,\n  hotspot {\n    x,\n    y\n  },\n  crop {\n    bottom,\n    left,\n    right,\n    top\n  }\n\n  }\n,\n    })\n  }\n\n  }\n\n  }\n  ': QuerySlugPageDataResult;
    '\n  *[_type == "page" && defined(slug.current)].slug.current\n': QuerySlugPagePathsResult;
    '\n  *[_type == "blogIndex"][0]{\n    ...,\n    _id,\n    _type,\n    title,\n    description,\n    "displayFeaturedBlogs" : displayFeaturedBlogs == "yes",\n    "featuredBlogsCount" : featuredBlogsCount,\n    \n  pageBuilder[]{\n    ...,\n    \n  "spacing": {\n    "spacingTop": coalesce(spacing.spacingTop, "default"),\n    "spacingBottom": coalesce(spacing.spacingBottom, "default")\n  }\n,\n    _type,\n    \n  _type == "cta" => {\n    ...,\n    \n  richText[]{\n    ...,\n    _type == "block" => {\n      ...,\n      \n  markDefs[]{\n    ...,\n    \n  ...customLink{\n    openInNewTab,\n    "href": select(\n      type == "internal" => internal->slug.current,\n      type == "external" => external,\n      "#"\n    ),\n  }\n\n  }\n\n    },\n    _type == "image" => {\n      \n  "id": asset._ref,\n  "preview": asset->metadata.lqip,\n  hotspot {\n    x,\n    y\n  },\n  crop {\n    bottom,\n    left,\n    right,\n    top\n  }\n,\n      "caption": caption\n    }\n  }\n,\n    \n  buttons[]{\n    text,\n    variant,\n    _key,\n    _type,\n    "openInNewTab": url.openInNewTab,\n    "href": select(\n      url.type == "internal" => url.internal->slug.current,\n      url.type == "external" => url.external,\n      url.href\n    ),\n  }\n,\n  }\n,\n    \n  _type == "feature" => {\n    ...,\n    \n  image {\n    \n  "id": asset._ref,\n  "preview": asset->metadata.lqip,\n  hotspot {\n    x,\n    y\n  },\n  crop {\n    bottom,\n    left,\n    right,\n    top\n  }\n\n  }\n,\n    \n  buttons[]{\n    text,\n    variant,\n    _key,\n    _type,\n    "openInNewTab": url.openInNewTab,\n    "href": select(\n      url.type == "internal" => url.internal->slug.current,\n      url.type == "external" => url.external,\n      url.href\n    ),\n  }\n,\n    \n  richText[]{\n    ...,\n    _type == "block" => {\n      ...,\n      \n  markDefs[]{\n    ...,\n    \n  ...customLink{\n    openInNewTab,\n    "href": select(\n      type == "internal" => internal->slug.current,\n      type == "external" => external,\n      "#"\n    ),\n  }\n\n  }\n\n    },\n    _type == "image" => {\n      \n  "id": asset._ref,\n  "preview": asset->metadata.lqip,\n  hotspot {\n    x,\n    y\n  },\n  crop {\n    bottom,\n    left,\n    right,\n    top\n  }\n,\n      "caption": caption\n    }\n  }\n\n  }\n,\n    \n  _type == "faqAccordion" => {\n    ...,\n    \n  "faqs": array::compact(faqs[]->{\n    title,\n    _id,\n    _type,\n    \n  richText[]{\n    ...,\n    _type == "block" => {\n      ...,\n      \n  markDefs[]{\n    ...,\n    \n  ...customLink{\n    openInNewTab,\n    "href": select(\n      type == "internal" => internal->slug.current,\n      type == "external" => external,\n      "#"\n    ),\n  }\n\n  }\n\n    },\n    _type == "image" => {\n      \n  "id": asset._ref,\n  "preview": asset->metadata.lqip,\n  hotspot {\n    x,\n    y\n  },\n  crop {\n    bottom,\n    left,\n    right,\n    top\n  }\n,\n      "caption": caption\n    }\n  }\n\n  })\n,\n    link{\n      ...,\n      "openInNewTab": url.openInNewTab,\n      "href": select(\n        url.type == "internal" => url.internal->slug.current,\n        url.type == "external" => url.external,\n        url.href\n      )\n    }\n  }\n,\n    \n  _type == "featureCardsIcon" => {\n    ...,\n    \n  richText[]{\n    ...,\n    _type == "block" => {\n      ...,\n      \n  markDefs[]{\n    ...,\n    \n  ...customLink{\n    openInNewTab,\n    "href": select(\n      type == "internal" => internal->slug.current,\n      type == "external" => external,\n      "#"\n    ),\n  }\n\n  }\n\n    },\n    _type == "image" => {\n      \n  "id": asset._ref,\n  "preview": asset->metadata.lqip,\n  hotspot {\n    x,\n    y\n  },\n  crop {\n    bottom,\n    left,\n    right,\n    top\n  }\n,\n      "caption": caption\n    }\n  }\n,\n    "cards": array::compact(cards[]{\n      ...,\n      \n  richText[]{\n    ...,\n    _type == "block" => {\n      ...,\n      \n  markDefs[]{\n    ...,\n    \n  ...customLink{\n    openInNewTab,\n    "href": select(\n      type == "internal" => internal->slug.current,\n      type == "external" => external,\n      "#"\n    ),\n  }\n\n  }\n\n    },\n    _type == "image" => {\n      \n  "id": asset._ref,\n  "preview": asset->metadata.lqip,\n  hotspot {\n    x,\n    y\n  },\n  crop {\n    bottom,\n    left,\n    right,\n    top\n  }\n,\n      "caption": caption\n    }\n  }\n,\n    })\n  }\n,\n    \n  _type == "subscribeNewsletter" => {\n    ...,\n    "subTitle": subTitle[]{\n      ...,\n      \n  markDefs[]{\n    ...,\n    \n  ...customLink{\n    openInNewTab,\n    "href": select(\n      type == "internal" => internal->slug.current,\n      type == "external" => external,\n      "#"\n    ),\n  }\n\n  }\n\n    },\n    "helperText": helperText[]{\n      ...,\n      \n  markDefs[]{\n    ...,\n    \n  ...customLink{\n    openInNewTab,\n    "href": select(\n      type == "internal" => internal->slug.current,\n      type == "external" => external,\n      "#"\n    ),\n  }\n\n  }\n\n    }\n  }\n,\n    \n  _type == "imageLinkCards" => {\n    ...,\n    \n  richText[]{\n    ...,\n    _type == "block" => {\n      ...,\n      \n  markDefs[]{\n    ...,\n    \n  ...customLink{\n    openInNewTab,\n    "href": select(\n      type == "internal" => internal->slug.current,\n      type == "external" => external,\n      "#"\n    ),\n  }\n\n  }\n\n    },\n    _type == "image" => {\n      \n  "id": asset._ref,\n  "preview": asset->metadata.lqip,\n  hotspot {\n    x,\n    y\n  },\n  crop {\n    bottom,\n    left,\n    right,\n    top\n  }\n,\n      "caption": caption\n    }\n  }\n,\n    \n  buttons[]{\n    text,\n    variant,\n    _key,\n    _type,\n    "openInNewTab": url.openInNewTab,\n    "href": select(\n      url.type == "internal" => url.internal->slug.current,\n      url.type == "external" => url.external,\n      url.href\n    ),\n  }\n,\n    "cards": array::compact(cards[]{\n      ...,\n      "openInNewTab": url.openInNewTab,\n      "href": select(\n        url.type == "internal" => url.internal->slug.current,\n        url.type == "external" => url.external,\n        url.href\n      ),\n      \n  image {\n    \n  "id": asset._ref,\n  "preview": asset->metadata.lqip,\n  hotspot {\n    x,\n    y\n  },\n  crop {\n    bottom,\n    left,\n    right,\n    top\n  }\n\n  }\n,\n    })\n  }\n\n  }\n,\n    "slug": slug.current,\n    "blogs": *[_type == "blog" && (seoHideFromLists != true)] | order(orderRank asc){\n      \n  _type,\n  _id,\n  title,\n  description,\n  "slug":slug.current,\n  orderRank,\n  \n  image {\n    \n  "id": asset._ref,\n  "preview": asset->metadata.lqip,\n  hotspot {\n    x,\n    y\n  },\n  crop {\n    bottom,\n    left,\n    right,\n    top\n  }\n\n  }\n,\n  publishedAt,\n  \n  authors[0]->{\n    _id,\n    name,\n    position,\n    \n  image {\n    \n  "id": asset._ref,\n  "preview": asset->metadata.lqip,\n  hotspot {\n    x,\n    y\n  },\n  crop {\n    bottom,\n    left,\n    right,\n    top\n  }\n\n  }\n\n  }\n\n\n    }\n  }\n': QueryBlogIndexPageDataResult;
    '\n  *[_type == "blog" && slug.current == $slug][0]{\n    ...,\n    "slug": slug.current,\n    \n  authors[0]->{\n    _id,\n    name,\n    position,\n    \n  image {\n    \n  "id": asset._ref,\n  "preview": asset->metadata.lqip,\n  hotspot {\n    x,\n    y\n  },\n  crop {\n    bottom,\n    left,\n    right,\n    top\n  }\n\n  }\n\n  }\n,\n    \n  image {\n    \n  "id": asset._ref,\n  "preview": asset->metadata.lqip,\n  hotspot {\n    x,\n    y\n  },\n  crop {\n    bottom,\n    left,\n    right,\n    top\n  }\n\n  }\n,\n    \n  richText[]{\n    ...,\n    _type == "block" => {\n      ...,\n      \n  markDefs[]{\n    ...,\n    \n  ...customLink{\n    openInNewTab,\n    "href": select(\n      type == "internal" => internal->slug.current,\n      type == "external" => external,\n      "#"\n    ),\n  }\n\n  }\n\n    },\n    _type == "image" => {\n      \n  "id": asset._ref,\n  "preview": asset->metadata.lqip,\n  hotspot {\n    x,\n    y\n  },\n  crop {\n    bottom,\n    left,\n    right,\n    top\n  }\n,\n      "caption": caption\n    }\n  }\n,\n    \n  pageBuilder[]{\n    ...,\n    \n  "spacing": {\n    "spacingTop": coalesce(spacing.spacingTop, "default"),\n    "spacingBottom": coalesce(spacing.spacingBottom, "default")\n  }\n,\n    _type,\n    \n  _type == "cta" => {\n    ...,\n    \n  richText[]{\n    ...,\n    _type == "block" => {\n      ...,\n      \n  markDefs[]{\n    ...,\n    \n  ...customLink{\n    openInNewTab,\n    "href": select(\n      type == "internal" => internal->slug.current,\n      type == "external" => external,\n      "#"\n    ),\n  }\n\n  }\n\n    },\n    _type == "image" => {\n      \n  "id": asset._ref,\n  "preview": asset->metadata.lqip,\n  hotspot {\n    x,\n    y\n  },\n  crop {\n    bottom,\n    left,\n    right,\n    top\n  }\n,\n      "caption": caption\n    }\n  }\n,\n    \n  buttons[]{\n    text,\n    variant,\n    _key,\n    _type,\n    "openInNewTab": url.openInNewTab,\n    "href": select(\n      url.type == "internal" => url.internal->slug.current,\n      url.type == "external" => url.external,\n      url.href\n    ),\n  }\n,\n  }\n,\n    \n  _type == "feature" => {\n    ...,\n    \n  image {\n    \n  "id": asset._ref,\n  "preview": asset->metadata.lqip,\n  hotspot {\n    x,\n    y\n  },\n  crop {\n    bottom,\n    left,\n    right,\n    top\n  }\n\n  }\n,\n    \n  buttons[]{\n    text,\n    variant,\n    _key,\n    _type,\n    "openInNewTab": url.openInNewTab,\n    "href": select(\n      url.type == "internal" => url.internal->slug.current,\n      url.type == "external" => url.external,\n      url.href\n    ),\n  }\n,\n    \n  richText[]{\n    ...,\n    _type == "block" => {\n      ...,\n      \n  markDefs[]{\n    ...,\n    \n  ...customLink{\n    openInNewTab,\n    "href": select(\n      type == "internal" => internal->slug.current,\n      type == "external" => external,\n      "#"\n    ),\n  }\n\n  }\n\n    },\n    _type == "image" => {\n      \n  "id": asset._ref,\n  "preview": asset->metadata.lqip,\n  hotspot {\n    x,\n    y\n  },\n  crop {\n    bottom,\n    left,\n    right,\n    top\n  }\n,\n      "caption": caption\n    }\n  }\n\n  }\n,\n    \n  _type == "faqAccordion" => {\n    ...,\n    \n  "faqs": array::compact(faqs[]->{\n    title,\n    _id,\n    _type,\n    \n  richText[]{\n    ...,\n    _type == "block" => {\n      ...,\n      \n  markDefs[]{\n    ...,\n    \n  ...customLink{\n    openInNewTab,\n    "href": select(\n      type == "internal" => internal->slug.current,\n      type == "external" => external,\n      "#"\n    ),\n  }\n\n  }\n\n    },\n    _type == "image" => {\n      \n  "id": asset._ref,\n  "preview": asset->metadata.lqip,\n  hotspot {\n    x,\n    y\n  },\n  crop {\n    bottom,\n    left,\n    right,\n    top\n  }\n,\n      "caption": caption\n    }\n  }\n\n  })\n,\n    link{\n      ...,\n      "openInNewTab": url.openInNewTab,\n      "href": select(\n        url.type == "internal" => url.internal->slug.current,\n        url.type == "external" => url.external,\n        url.href\n      )\n    }\n  }\n,\n    \n  _type == "featureCardsIcon" => {\n    ...,\n    \n  richText[]{\n    ...,\n    _type == "block" => {\n      ...,\n      \n  markDefs[]{\n    ...,\n    \n  ...customLink{\n    openInNewTab,\n    "href": select(\n      type == "internal" => internal->slug.current,\n      type == "external" => external,\n      "#"\n    ),\n  }\n\n  }\n\n    },\n    _type == "image" => {\n      \n  "id": asset._ref,\n  "preview": asset->metadata.lqip,\n  hotspot {\n    x,\n    y\n  },\n  crop {\n    bottom,\n    left,\n    right,\n    top\n  }\n,\n      "caption": caption\n    }\n  }\n,\n    "cards": array::compact(cards[]{\n      ...,\n      \n  richText[]{\n    ...,\n    _type == "block" => {\n      ...,\n      \n  markDefs[]{\n    ...,\n    \n  ...customLink{\n    openInNewTab,\n    "href": select(\n      type == "internal" => internal->slug.current,\n      type == "external" => external,\n      "#"\n    ),\n  }\n\n  }\n\n    },\n    _type == "image" => {\n      \n  "id": asset._ref,\n  "preview": asset->metadata.lqip,\n  hotspot {\n    x,\n    y\n  },\n  crop {\n    bottom,\n    left,\n    right,\n    top\n  }\n,\n      "caption": caption\n    }\n  }\n,\n    })\n  }\n,\n    \n  _type == "subscribeNewsletter" => {\n    ...,\n    "subTitle": subTitle[]{\n      ...,\n      \n  markDefs[]{\n    ...,\n    \n  ...customLink{\n    openInNewTab,\n    "href": select(\n      type == "internal" => internal->slug.current,\n      type == "external" => external,\n      "#"\n    ),\n  }\n\n  }\n\n    },\n    "helperText": helperText[]{\n      ...,\n      \n  markDefs[]{\n    ...,\n    \n  ...customLink{\n    openInNewTab,\n    "href": select(\n      type == "internal" => internal->slug.current,\n      type == "external" => external,\n      "#"\n    ),\n  }\n\n  }\n\n    }\n  }\n,\n    \n  _type == "imageLinkCards" => {\n    ...,\n    \n  richText[]{\n    ...,\n    _type == "block" => {\n      ...,\n      \n  markDefs[]{\n    ...,\n    \n  ...customLink{\n    openInNewTab,\n    "href": select(\n      type == "internal" => internal->slug.current,\n      type == "external" => external,\n      "#"\n    ),\n  }\n\n  }\n\n    },\n    _type == "image" => {\n      \n  "id": asset._ref,\n  "preview": asset->metadata.lqip,\n  hotspot {\n    x,\n    y\n  },\n  crop {\n    bottom,\n    left,\n    right,\n    top\n  }\n,\n      "caption": caption\n    }\n  }\n,\n    \n  buttons[]{\n    text,\n    variant,\n    _key,\n    _type,\n    "openInNewTab": url.openInNewTab,\n    "href": select(\n      url.type == "internal" => url.internal->slug.current,\n      url.type == "external" => url.external,\n      url.href\n    ),\n  }\n,\n    "cards": array::compact(cards[]{\n      ...,\n      "openInNewTab": url.openInNewTab,\n      "href": select(\n        url.type == "internal" => url.internal->slug.current,\n        url.type == "external" => url.external,\n        url.href\n      ),\n      \n  image {\n    \n  "id": asset._ref,\n  "preview": asset->metadata.lqip,\n  hotspot {\n    x,\n    y\n  },\n  crop {\n    bottom,\n    left,\n    right,\n    top\n  }\n\n  }\n,\n    })\n  }\n\n  }\n\n  }\n': QueryBlogSlugPageDataResult;
    '\n  *[_type == "blog" && defined(slug.current)].slug.current\n': QueryBlogPathsResult;
    '\n  *[_type == "homePage" && _id == $id][0]{\n    \n  _id,\n  _type,\n  "title": coalesce(string(select(\n    defined(ogTitle) => ogTitle,\n    defined(seoTitle) => seoTitle,\n    _type == "sauce" => name,\n    _type == "product" => name,\n    _type == "recipe" => name,\n    title\n  )), ""),\n  "description": coalesce(string(select(\n    defined(ogDescription) => ogDescription,\n    defined(seoDescription) => seoDescription,\n    _type == "sauce" => pt::text(description),\n    _type == "product" => coalesce(pt::text(description), name),\n    _type == "recipe" => coalesce(pt::text(description), name),\n    description\n  )), ""),\n  // Prefer mainImage (product/recipe) and fall back to image\n  "image": coalesce(\n    mainImage.asset->url,\n    image.asset->url\n  ) + "?w=566&h=566&dpr=2&fit=max",\n  "dominantColor": coalesce(\n    mainImage.asset->metadata.palette.dominant.background,\n    image.asset->metadata.palette.dominant.background\n  ),\n  "seoImage": seoImage.asset->url + "?w=1200&h=630&dpr=2&fit=max",\n  "date": coalesce(date, _createdAt)\n\n  }\n  ': QueryHomePageOGDataResult;
    '\n  *[_type == "page" && _id == $id][0]{\n    \n  _id,\n  _type,\n  "title": coalesce(string(select(\n    defined(ogTitle) => ogTitle,\n    defined(seoTitle) => seoTitle,\n    _type == "sauce" => name,\n    _type == "product" => name,\n    _type == "recipe" => name,\n    title\n  )), ""),\n  "description": coalesce(string(select(\n    defined(ogDescription) => ogDescription,\n    defined(seoDescription) => seoDescription,\n    _type == "sauce" => pt::text(description),\n    _type == "product" => coalesce(pt::text(description), name),\n    _type == "recipe" => coalesce(pt::text(description), name),\n    description\n  )), ""),\n  // Prefer mainImage (product/recipe) and fall back to image\n  "image": coalesce(\n    mainImage.asset->url,\n    image.asset->url\n  ) + "?w=566&h=566&dpr=2&fit=max",\n  "dominantColor": coalesce(\n    mainImage.asset->metadata.palette.dominant.background,\n    image.asset->metadata.palette.dominant.background\n  ),\n  "seoImage": seoImage.asset->url + "?w=1200&h=630&dpr=2&fit=max",\n  "date": coalesce(date, _createdAt)\n\n  }\n': QuerySlugPageOGDataResult;
    '\n  *[_type == "blog" && _id == $id][0]{\n    \n  _id,\n  _type,\n  "title": coalesce(string(select(\n    defined(ogTitle) => ogTitle,\n    defined(seoTitle) => seoTitle,\n    _type == "sauce" => name,\n    _type == "product" => name,\n    _type == "recipe" => name,\n    title\n  )), ""),\n  "description": coalesce(string(select(\n    defined(ogDescription) => ogDescription,\n    defined(seoDescription) => seoDescription,\n    _type == "sauce" => pt::text(description),\n    _type == "product" => coalesce(pt::text(description), name),\n    _type == "recipe" => coalesce(pt::text(description), name),\n    description\n  )), ""),\n  // Prefer mainImage (product/recipe) and fall back to image\n  "image": coalesce(\n    mainImage.asset->url,\n    image.asset->url\n  ) + "?w=566&h=566&dpr=2&fit=max",\n  "dominantColor": coalesce(\n    mainImage.asset->metadata.palette.dominant.background,\n    image.asset->metadata.palette.dominant.background\n  ),\n  "seoImage": seoImage.asset->url + "?w=1200&h=630&dpr=2&fit=max",\n  "date": coalesce(date, _createdAt)\n\n  }\n': QueryBlogPageOGDataResult;
    '\n  *[ defined(slug.current) && _id == $id][0]{\n    \n  _id,\n  _type,\n  "title": coalesce(string(select(\n    defined(ogTitle) => ogTitle,\n    defined(seoTitle) => seoTitle,\n    _type == "sauce" => name,\n    _type == "product" => name,\n    _type == "recipe" => name,\n    title\n  )), ""),\n  "description": coalesce(string(select(\n    defined(ogDescription) => ogDescription,\n    defined(seoDescription) => seoDescription,\n    _type == "sauce" => pt::text(description),\n    _type == "product" => coalesce(pt::text(description), name),\n    _type == "recipe" => coalesce(pt::text(description), name),\n    description\n  )), ""),\n  // Prefer mainImage (product/recipe) and fall back to image\n  "image": coalesce(\n    mainImage.asset->url,\n    image.asset->url\n  ) + "?w=566&h=566&dpr=2&fit=max",\n  "dominantColor": coalesce(\n    mainImage.asset->metadata.palette.dominant.background,\n    image.asset->metadata.palette.dominant.background\n  ),\n  "seoImage": seoImage.asset->url + "?w=1200&h=630&dpr=2&fit=max",\n  "date": coalesce(date, _createdAt)\n\n  }\n': QueryGenericPageOGDataResult;
    '\n  *[_type == "footer" && _id == "footer"][0]{\n    _id,\n    subtitle,\n    columns[]{\n      _key,\n      title,\n      links[]{\n        _key,\n        name,\n        "openInNewTab": url.openInNewTab,\n        "href": select(\n          url.type == "internal" => url.internal->slug.current,\n          url.type == "external" => url.external,\n          url.href\n        ),\n      }\n    }\n  }\n': QueryFooterDataResult;
    '\n  *[_type == "navbar" && _id == "navbar"][0]{\n    _id,\n    columns[]{\n      _key,\n      _type == "navbarColumn" => {\n        "type": "column",\n        title,\n        links[]{\n          _key,\n          name,\n          icon,\n          description,\n          "openInNewTab": url.openInNewTab,\n          "href": select(\n            url.type == "internal" => url.internal->slug.current,\n            url.type == "external" => url.external,\n            url.href\n          )\n        }\n      },\n      _type == "navbarLink" => {\n        "type": "link",\n        name,\n        description,\n        "openInNewTab": url.openInNewTab,\n        "href": select(\n          url.type == "internal" => url.internal->slug.current,\n          url.type == "external" => url.external,\n          url.href\n        )\n      }\n    },\n    \n  buttons[]{\n    text,\n    variant,\n    _key,\n    _type,\n    "openInNewTab": url.openInNewTab,\n    "href": select(\n      url.type == "internal" => url.internal->slug.current,\n      url.type == "external" => url.external,\n      url.href\n    ),\n  }\n,\n  }\n': QueryNavbarDataResult;
    '{\n  "slugPages": *[_type == "page" && defined(slug.current)]{\n    "slug": slug.current,\n    "lastModified": _updatedAt\n  },\n  "blogPages": *[_type == "blog" && defined(slug.current)]{\n    "slug": slug.current,\n    "lastModified": _updatedAt\n  },\n  "saucePages": *[_type == "sauce" && defined(slug.current)]{\n    "slug": slug.current,\n    "lastModified": _updatedAt\n  },\n  "productPages": *[_type == "product" && defined(slug.current)]{\n    "slug": slug.current,\n    "lastModified": _updatedAt\n  },\n  "recipePages": *[_type == "recipe" && defined(slug.current)]{\n    "slug": slug.current,\n    "lastModified": _updatedAt\n  }\n}': QuerySitemapDataResult;
    '\n  *[_type == "settings"][0]{\n    _id,\n    _type,\n    siteTitle,\n    siteDescription,\n    addressLines,\n    contactEmail,\n    tollFreePhone,\n    officePhone,\n    socialLinks{\n      linkedin,\n      facebook,\n      twitter,\n      instagram,\n      youtube\n    }\n  }\n': QueryGlobalSeoSettingsResult;
    '\n  *[_type == "settings"][0]{\n    _id,\n    _type,\n    siteTitle,\n    siteDescription,\n    "socialLinks": socialLinks,\n    "contactEmail": contactEmail,\n  }\n': QuerySettingsDataResult;
    '\n  *[_type == "sauceIndex"][0]{\n    _id,\n    _type,\n    title,\n    description,\n    "slug": slug.current\n  }\n': GetSauceIndexPageQueryResult;
    '\n  *[_type == "sauce" && !(_id in path(\'drafts.**\'))] | order(name asc){\n    _id,\n    _type,\n    name,\n    "slug": slug.current,\n    line,\n    category,\n    "descriptionPlain": pt::text(description),\n    "mainImage": {\n      "id": mainImage.asset._ref,\n      "preview": mainImage.asset->metadata.lqip,\n      "hotspot": mainImage.hotspot{ x, y },\n      "crop": mainImage.crop{ top, bottom, left, right },\n      "alt": mainImage.alt\n    }\n  }\n': GetAllSaucesForIndexQueryResult;
    '\n  *[\n    _type == "sauce"\n    && _id in $sauceIds\n    && defined(slug.current)\n    && !(_id in path(\'drafts.**\'))\n  ] | order(name asc){\n    _id,\n    _type,\n    name,\n    "slug": slug.current,\n    line,\n    category,\n    "descriptionPlain": coalesce(pt::text(description), ""),\n    "mainImage": mainImage{\n      \n  "id": asset._ref,\n  "preview": asset->metadata.lqip,\n  hotspot {\n    x,\n    y\n  },\n  crop {\n    bottom,\n    left,\n    right,\n    top\n  }\n,\n      "alt": coalesce(alt, "")\n    }\n  }\n': GetSaucesByIdsQueryResult;
    '\n  *[_type == "sauce" && slug.current in [$slug, $prefixedSlug]][0]{\n    _id,\n    _type,\n    name,\n    "slug": slug.current,\n    line,\n    category,\n    "description": description[]{\n      ...,\n      _type == "block" => {\n        ...,\n        \n  markDefs[]{\n    ...,\n    \n  ...customLink{\n    openInNewTab,\n    "href": select(\n      type == "internal" => internal->slug.current,\n      type == "external" => external,\n      "#"\n    ),\n  }\n\n  }\n\n      },\n      _type == "image" => {\n        \n  "id": asset._ref,\n  "preview": asset->metadata.lqip,\n  hotspot {\n    x,\n    y\n  },\n  crop {\n    bottom,\n    left,\n    right,\n    top\n  }\n,\n        "caption": caption\n      }\n    },\n    "descriptionPlain": coalesce(pt::text(description), ""),\n    "mainImage": mainImage{\n      \n  "id": asset._ref,\n  "preview": asset->metadata.lqip,\n  hotspot {\n    x,\n    y\n  },\n  crop {\n    bottom,\n    left,\n    right,\n    top\n  }\n,\n      "alt": coalesce(alt, "")\n    },\n    "labelFlatImage": labelFlatImage{\n      \n  "id": asset._ref,\n  "preview": asset->metadata.lqip,\n  hotspot {\n    x,\n    y\n  },\n  crop {\n    bottom,\n    left,\n    right,\n    top\n  }\n,\n      "alt": coalesce(alt, "")\n    },\n    authorName,\n    "authorImage": authorImage{\n      \n  "id": asset._ref,\n  "preview": asset->metadata.lqip,\n  hotspot {\n    x,\n    y\n  },\n  crop {\n    bottom,\n    left,\n    right,\n    top\n  }\n,\n      "alt": coalesce(alt, "")\n    },\n    nutritionalInfo,\n    ingredients,\n    allergens\n  }\n': GetSauceBySlugQueryResult;
    '\n  *[_type == "recipeIndex"][0]{\n    _id,\n    _type,\n    title,\n    description,\n    "slug": slug.current\n  }\n': GetRecipeIndexPageQueryResult;
    '\n  *[_type == "recipe" && !(_id in path(\'drafts.**\'))] | order(name asc){\n    _id,\n    name,\n    "slug": slug.current,\n    tags,\n    meat,\n    versions,\n    "categories": array::compact(categories[]->{ _id, title, slug }),\n    "descriptionPlain": "",\n    "mainImage": {\n      "id": coalesce(mainImage.asset._ref, ""),\n      "preview": mainImage.asset->metadata.lqip,\n      "hotspot": mainImage.hotspot{ x, y },\n      "crop": mainImage.crop{ top, bottom, left, right }\n    },\n    // Compute unique product lines from both DGF and LFD sauces\n    "sauceLines": array::unique((array::compact(dgfSauces[]->line) + array::compact(lfdSauces[]->line)))\n  }\n': GetAllRecipesForIndexQueryResult;
    '\n  *[\n    _type == "recipe"\n    && defined(slug.current)\n    && !(_id in path(\'drafts.**\'))\n    && $sauceId != null\n    && references($sauceId)\n  ] | order(name asc){\n    _id,\n    name,\n    "slug": slug.current,\n    tags,\n    meat,\n    versions,\n    "categories": array::compact(categories[]->{ _id, title, slug }),\n    "descriptionPlain": "",\n    "mainImage": {\n      "id": coalesce(mainImage.asset._ref, ""),\n      "preview": mainImage.asset->metadata.lqip,\n      "hotspot": mainImage.hotspot{ x, y },\n      "crop": mainImage.crop{ top, bottom, left, right }\n    },\n    // Compute unique product lines from both DGF and LFD sauces\n    "sauceLines": array::unique((array::compact(dgfSauces[]->line) + array::compact(lfdSauces[]->line)))\n  }\n': GetRecipesBySauceIdQueryResult;
    '\n  *[\n    _type == "recipe"\n    && defined(slug.current)\n    && !(_id in path(\'drafts.**\'))\n    && $sauceIds != null\n    && count($sauceIds) > 0\n    && count((coalesce(dgfSauces[]._ref, []) + coalesce(lfdSauces[]._ref, []))[@ in $sauceIds]) > 0\n  ] | order(name asc){\n    _id,\n    name,\n    "slug": slug.current,\n    tags,\n    meat,\n    versions,\n    "categories": array::compact(categories[]->{ _id, title, slug }),\n    "descriptionPlain": "",\n    "mainImage": {\n      "id": coalesce(mainImage.asset._ref, ""),\n      "preview": mainImage.asset->metadata.lqip,\n      "hotspot": mainImage.hotspot{ x, y },\n      "crop": mainImage.crop{ top, bottom, left, right }\n    },\n    // Compute unique product lines from both DGF and LFD sauces\n    "sauceLines": array::unique((array::compact(dgfSauces[]->line) + array::compact(lfdSauces[]->line)))\n  }\n': GetRecipesBySauceIdsQueryResult;
    '\n  *[_type == "recipeCategory"] | order(title asc){ _id, title, slug }\n': GetAllRecipeCategoriesQueryResult;
    '\n  *[\n    _type == "recipe"\n    && _id == $id\n    && !(_id in path(\'drafts.**\'))\n  ][0]{\n    _id,\n    _type,\n    name,\n    "slug": slug.current,\n    serves,\n    tags,\n    meat,\n    versions,\n    "categories": array::compact(categories[]->{ _id, title, slug }),\n    "mainImage": {\n      "id": coalesce(mainImage.asset._ref, ""),\n      "preview": mainImage.asset->metadata.lqip,\n      "hotspot": mainImage.hotspot{ x, y },\n      "crop": mainImage.crop{ top, bottom, left, right },\n      "alt": mainImage.alt\n    },\n    dgfIngredients,\n    dgfDirections,\n    dgfNotes,\n    lfdIngredients,\n    lfdDirections,\n    lfdNotes,\n    dgfSauces[]->{\n      _id,\n      name,\n      "slug": slug.current,\n      line,\n      "mainImage": mainImage{\n        \n  "id": asset._ref,\n  "preview": asset->metadata.lqip,\n  hotspot {\n    x,\n    y\n  },\n  crop {\n    bottom,\n    left,\n    right,\n    top\n  }\n,\n        "alt": coalesce(alt, "")\n      }\n    },\n    lfdSauces[]->{\n      _id,\n      name,\n      "slug": slug.current,\n      line,\n      "mainImage": mainImage{\n        \n  "id": asset._ref,\n  "preview": asset->metadata.lqip,\n  hotspot {\n    x,\n    y\n  },\n  crop {\n    bottom,\n    left,\n    right,\n    top\n  }\n,\n        "alt": coalesce(alt, "")\n      }\n    }\n  }\n': GetRecipeByIdQueryResult;
    '\n  *[\n    _type == "recipe"\n    && slug.current in [$slug, $prefixedSlug]\n    && !(_id in path(\'drafts.**\'))\n  ][0]{\n    _id,\n    _type,\n    name,\n    "slug": slug.current,\n    serves,\n    tags,\n    meat,\n    versions,\n    "categories": array::compact(categories[]->{ _id, title, slug }),\n    "mainImage": {\n      "id": coalesce(mainImage.asset._ref, ""),\n      "preview": mainImage.asset->metadata.lqip,\n      "hotspot": mainImage.hotspot{ x, y },\n      "crop": mainImage.crop{ top, bottom, left, right },\n      "alt": mainImage.alt\n    },\n    dgfIngredients,\n    dgfDirections,\n    dgfNotes,\n    lfdIngredients,\n    lfdDirections,\n    lfdNotes,\n    dgfSauces[]->{\n      _id,\n      name,\n      "slug": slug.current,\n      line,\n      "mainImage": mainImage{\n        \n  "id": asset._ref,\n  "preview": asset->metadata.lqip,\n  hotspot {\n    x,\n    y\n  },\n  crop {\n    bottom,\n    left,\n    right,\n    top\n  }\n,\n        "alt": coalesce(alt, "")\n      }\n    },\n    lfdSauces[]->{\n      _id,\n      name,\n      "slug": slug.current,\n      line,\n      "mainImage": mainImage{\n        \n  "id": asset._ref,\n  "preview": asset->metadata.lqip,\n  hotspot {\n    x,\n    y\n  },\n  crop {\n    bottom,\n    left,\n    right,\n    top\n  }\n,\n        "alt": coalesce(alt, "")\n      }\n    }\n  }\n': GetRecipeBySlugQueryResult;
    '\n  *[_type == "productIndex"][0]{\n    _id,\n    _type,\n    title,\n    description,\n    "slug": slug.current\n  }\n': GetProductIndexPageQueryResult;
    '\n  *[_type == "product" && defined(slug.current) && !(_id in path(\'drafts.**\'))] | order(name asc){\n    _id,\n    name,\n    "slug": slug.current,\n    category,\n    price,\n    "descriptionPlain": coalesce(pt::text(description), ""),\n    "mainImage": {\n      "id": coalesce(mainImage.asset._ref, ""),\n      "preview": mainImage.asset->metadata.lqip,\n      "hotspot": mainImage.hotspot{ x, y },\n      "crop": mainImage.crop{ top, bottom, left, right },\n      "alt": mainImage.alt\n    },\n    // Unique sets of referenced sauce attributes for filtering/badges\n    "sauceLines": array::unique((sauces[]->line)[defined(@)]),\n    "sauceTypes": array::unique((sauces[]->category)[defined(@)])\n  }\n': GetAllProductsForIndexQueryResult;
    '\n  *[\n    _type == "product"\n    && defined(slug.current)\n    && !(_id in path(\'drafts.**\'))\n    && $sauceId != null\n    && references($sauceId)\n  ] | order(name asc){\n    _id,\n    name,\n    "slug": slug.current,\n    category,\n    price,\n    "descriptionPlain": coalesce(pt::text(description), ""),\n    "mainImage": {\n      "id": coalesce(mainImage.asset._ref, ""),\n      "preview": mainImage.asset->metadata.lqip,\n      "hotspot": mainImage.hotspot{ x, y },\n      "crop": mainImage.crop{ top, bottom, left, right },\n      "alt": mainImage.alt\n    },\n    "sauceLines": array::unique((sauces[]->line)[defined(@)]),\n    "sauceTypes": array::unique((sauces[]->category)[defined(@)])\n  }\n': GetProductsBySauceIdQueryResult;
    '\n  *[_type == "product" && slug.current in [$slug, $prefixedSlug]][0]{\n    _id,\n    _type,\n    name,\n    "slug": slug.current,\n    sku,\n    category,\n    shippingCategory,\n    price,\n    weight,\n    "description": description[]{\n      ...,\n      _type == "block" => {\n        ...,\n        \n  markDefs[]{\n    ...,\n    \n  ...customLink{\n    openInNewTab,\n    "href": select(\n      type == "internal" => internal->slug.current,\n      type == "external" => external,\n      "#"\n    ),\n  }\n\n  }\n\n      },\n      _type == "image" => {\n        \n  "id": asset._ref,\n  "preview": asset->metadata.lqip,\n  hotspot {\n    x,\n    y\n  },\n  crop {\n    bottom,\n    left,\n    right,\n    top\n  }\n,\n        "caption": caption\n      }\n    },\n    "descriptionPlain": coalesce(pt::text(description), ""),\n    "mainImage": mainImage{\n      \n  "id": asset._ref,\n  "preview": asset->metadata.lqip,\n  hotspot {\n    x,\n    y\n  },\n  crop {\n    bottom,\n    left,\n    right,\n    top\n  }\n,\n      "alt": coalesce(alt, "")\n    },\n    "sauces": array::compact(sauces[]->{\n      _id,\n      _type,\n      name,\n      line,\n      category,\n      "slug": slug.current,\n      "descriptionPlain": coalesce(pt::text(description), ""),\n      "mainImage": mainImage{\n        \n  "id": asset._ref,\n  "preview": asset->metadata.lqip,\n  hotspot {\n    x,\n    y\n  },\n  crop {\n    bottom,\n    left,\n    right,\n    top\n  }\n,\n        "alt": coalesce(alt, "")\n      }\n    })\n  }\n': GetProductBySlugQueryResult;
    '\n  *[_type == "historyPage"][0]{\n    _id,\n    _type,\n    title,\n    description,\n    timeline{\n      markers[]{\n        heading,\n        subtitle,\n        content[]{\n          ...,\n          _type == "block" => {\n            ...,\n            \n  markDefs[]{\n    ...,\n    \n  ...customLink{\n    openInNewTab,\n    "href": select(\n      type == "internal" => internal->slug.current,\n      type == "external" => external,\n      "#"\n    ),\n  }\n\n  }\n\n          },\n          _type == "image" => {\n            \n  image {\n    \n  "id": asset._ref,\n  "preview": asset->metadata.lqip,\n  hotspot {\n    x,\n    y\n  },\n  crop {\n    bottom,\n    left,\n    right,\n    top\n  }\n\n  }\n\n          }\n        },\n        image{\n          \n  "id": asset._ref,\n  "preview": asset->metadata.lqip,\n  hotspot {\n    x,\n    y\n  },\n  crop {\n    bottom,\n    left,\n    right,\n    top\n  }\n,\n          "assetRef": asset._ref\n        }\n      }\n    },\n    \n  pageBuilder[]{\n    ...,\n    \n  "spacing": {\n    "spacingTop": coalesce(spacing.spacingTop, "default"),\n    "spacingBottom": coalesce(spacing.spacingBottom, "default")\n  }\n,\n    _type,\n    \n  _type == "cta" => {\n    ...,\n    \n  richText[]{\n    ...,\n    _type == "block" => {\n      ...,\n      \n  markDefs[]{\n    ...,\n    \n  ...customLink{\n    openInNewTab,\n    "href": select(\n      type == "internal" => internal->slug.current,\n      type == "external" => external,\n      "#"\n    ),\n  }\n\n  }\n\n    },\n    _type == "image" => {\n      \n  "id": asset._ref,\n  "preview": asset->metadata.lqip,\n  hotspot {\n    x,\n    y\n  },\n  crop {\n    bottom,\n    left,\n    right,\n    top\n  }\n,\n      "caption": caption\n    }\n  }\n,\n    \n  buttons[]{\n    text,\n    variant,\n    _key,\n    _type,\n    "openInNewTab": url.openInNewTab,\n    "href": select(\n      url.type == "internal" => url.internal->slug.current,\n      url.type == "external" => url.external,\n      url.href\n    ),\n  }\n,\n  }\n,\n    \n  _type == "feature" => {\n    ...,\n    \n  image {\n    \n  "id": asset._ref,\n  "preview": asset->metadata.lqip,\n  hotspot {\n    x,\n    y\n  },\n  crop {\n    bottom,\n    left,\n    right,\n    top\n  }\n\n  }\n,\n    \n  buttons[]{\n    text,\n    variant,\n    _key,\n    _type,\n    "openInNewTab": url.openInNewTab,\n    "href": select(\n      url.type == "internal" => url.internal->slug.current,\n      url.type == "external" => url.external,\n      url.href\n    ),\n  }\n,\n    \n  richText[]{\n    ...,\n    _type == "block" => {\n      ...,\n      \n  markDefs[]{\n    ...,\n    \n  ...customLink{\n    openInNewTab,\n    "href": select(\n      type == "internal" => internal->slug.current,\n      type == "external" => external,\n      "#"\n    ),\n  }\n\n  }\n\n    },\n    _type == "image" => {\n      \n  "id": asset._ref,\n  "preview": asset->metadata.lqip,\n  hotspot {\n    x,\n    y\n  },\n  crop {\n    bottom,\n    left,\n    right,\n    top\n  }\n,\n      "caption": caption\n    }\n  }\n\n  }\n,\n    \n  _type == "faqAccordion" => {\n    ...,\n    \n  "faqs": array::compact(faqs[]->{\n    title,\n    _id,\n    _type,\n    \n  richText[]{\n    ...,\n    _type == "block" => {\n      ...,\n      \n  markDefs[]{\n    ...,\n    \n  ...customLink{\n    openInNewTab,\n    "href": select(\n      type == "internal" => internal->slug.current,\n      type == "external" => external,\n      "#"\n    ),\n  }\n\n  }\n\n    },\n    _type == "image" => {\n      \n  "id": asset._ref,\n  "preview": asset->metadata.lqip,\n  hotspot {\n    x,\n    y\n  },\n  crop {\n    bottom,\n    left,\n    right,\n    top\n  }\n,\n      "caption": caption\n    }\n  }\n\n  })\n,\n    link{\n      ...,\n      "openInNewTab": url.openInNewTab,\n      "href": select(\n        url.type == "internal" => url.internal->slug.current,\n        url.type == "external" => url.external,\n        url.href\n      )\n    }\n  }\n,\n    \n  _type == "featureCardsIcon" => {\n    ...,\n    \n  richText[]{\n    ...,\n    _type == "block" => {\n      ...,\n      \n  markDefs[]{\n    ...,\n    \n  ...customLink{\n    openInNewTab,\n    "href": select(\n      type == "internal" => internal->slug.current,\n      type == "external" => external,\n      "#"\n    ),\n  }\n\n  }\n\n    },\n    _type == "image" => {\n      \n  "id": asset._ref,\n  "preview": asset->metadata.lqip,\n  hotspot {\n    x,\n    y\n  },\n  crop {\n    bottom,\n    left,\n    right,\n    top\n  }\n,\n      "caption": caption\n    }\n  }\n,\n    "cards": array::compact(cards[]{\n      ...,\n      \n  richText[]{\n    ...,\n    _type == "block" => {\n      ...,\n      \n  markDefs[]{\n    ...,\n    \n  ...customLink{\n    openInNewTab,\n    "href": select(\n      type == "internal" => internal->slug.current,\n      type == "external" => external,\n      "#"\n    ),\n  }\n\n  }\n\n    },\n    _type == "image" => {\n      \n  "id": asset._ref,\n  "preview": asset->metadata.lqip,\n  hotspot {\n    x,\n    y\n  },\n  crop {\n    bottom,\n    left,\n    right,\n    top\n  }\n,\n      "caption": caption\n    }\n  }\n,\n    })\n  }\n,\n    \n  _type == "subscribeNewsletter" => {\n    ...,\n    "subTitle": subTitle[]{\n      ...,\n      \n  markDefs[]{\n    ...,\n    \n  ...customLink{\n    openInNewTab,\n    "href": select(\n      type == "internal" => internal->slug.current,\n      type == "external" => external,\n      "#"\n    ),\n  }\n\n  }\n\n    },\n    "helperText": helperText[]{\n      ...,\n      \n  markDefs[]{\n    ...,\n    \n  ...customLink{\n    openInNewTab,\n    "href": select(\n      type == "internal" => internal->slug.current,\n      type == "external" => external,\n      "#"\n    ),\n  }\n\n  }\n\n    }\n  }\n,\n    \n  _type == "imageLinkCards" => {\n    ...,\n    \n  richText[]{\n    ...,\n    _type == "block" => {\n      ...,\n      \n  markDefs[]{\n    ...,\n    \n  ...customLink{\n    openInNewTab,\n    "href": select(\n      type == "internal" => internal->slug.current,\n      type == "external" => external,\n      "#"\n    ),\n  }\n\n  }\n\n    },\n    _type == "image" => {\n      \n  "id": asset._ref,\n  "preview": asset->metadata.lqip,\n  hotspot {\n    x,\n    y\n  },\n  crop {\n    bottom,\n    left,\n    right,\n    top\n  }\n,\n      "caption": caption\n    }\n  }\n,\n    \n  buttons[]{\n    text,\n    variant,\n    _key,\n    _type,\n    "openInNewTab": url.openInNewTab,\n    "href": select(\n      url.type == "internal" => url.internal->slug.current,\n      url.type == "external" => url.external,\n      url.href\n    ),\n  }\n,\n    "cards": array::compact(cards[]{\n      ...,\n      "openInNewTab": url.openInNewTab,\n      "href": select(\n        url.type == "internal" => url.internal->slug.current,\n        url.type == "external" => url.external,\n        url.href\n      ),\n      \n  image {\n    \n  "id": asset._ref,\n  "preview": asset->metadata.lqip,\n  hotspot {\n    x,\n    y\n  },\n  crop {\n    bottom,\n    left,\n    right,\n    top\n  }\n\n  }\n,\n    })\n  }\n\n  }\n\n  }\n': GetHistoryPageQueryResult;
  }
}
